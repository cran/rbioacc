// Generated by rstantools.  Do not edit by hand.

/*
    rbioacc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rbioacc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rbioacc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_odeTK_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 223> locations_array__ =
  {" (found before start of program)",
  " (in 'odeTK', line 166, column 2 to column 25)",
  " (in 'odeTK', line 167, column 2 to column 25)",
  " (in 'odeTK', line 168, column 2 to column 25)",
  " (in 'odeTK', line 169, column 2 to column 26)",
  " (in 'odeTK', line 170, column 2 to column 42)",
  " (in 'odeTK', line 171, column 2 to column 40)",
  " (in 'odeTK', line 172, column 2 to column 39)",
  " (in 'odeTK', line 173, column 2 to column 35)",
  " (in 'odeTK', line 177, column 2 to column 29)",
  " (in 'odeTK', line 178, column 2 to column 29)",
  " (in 'odeTK', line 179, column 2 to column 29)",
  " (in 'odeTK', line 180, column 2 to column 30)",
  " (in 'odeTK', line 183, column 2 to column 29)",
  " (in 'odeTK', line 185, column 2 to column 30)",
  " (in 'odeTK', line 186, column 2 to column 32)",
  " (in 'odeTK', line 189, column 2 to column 36)",
  " (in 'odeTK', line 191, column 2 to column 45)",
  " (in 'odeTK', line 193, column 4 to column 29)",
  " (in 'odeTK', line 192, column 19 to line 194, column 3)",
  " (in 'odeTK', line 192, column 2 to line 194, column 3)",
  " (in 'odeTK', line 196, column 4 to column 29)",
  " (in 'odeTK', line 195, column 19 to line 197, column 3)",
  " (in 'odeTK', line 195, column 2 to line 197, column 3)",
  " (in 'odeTK', line 199, column 4 to column 29)",
  " (in 'odeTK', line 200, column 4 to column 31)",
  " (in 'odeTK', line 198, column 19 to line 201, column 3)",
  " (in 'odeTK', line 198, column 2 to line 201, column 3)",
  " (in 'odeTK', line 210, column 4 to column 22)",
  " (in 'odeTK', line 209, column 19 to line 211, column 3)",
  " (in 'odeTK', line 209, column 2 to line 211, column 3)",
  " (in 'odeTK', line 213, column 4 to column 28)",
  " (in 'odeTK', line 212, column 20 to line 214, column 3)",
  " (in 'odeTK', line 212, column 3 to line 214, column 3)",
  " (in 'odeTK', line 216, column 4 to column 34)",
  " (in 'odeTK', line 215, column 20 to line 217, column 3)",
  " (in 'odeTK', line 215, column 3 to line 217, column 3)",
  " (in 'odeTK', line 219, column 4 to column 41)",
  " (in 'odeTK', line 218, column 20 to line 220, column 3)",
  " (in 'odeTK', line 218, column 3 to line 220, column 3)",
  " (in 'odeTK', line 221, column 2 to column 68)",
  " (in 'odeTK', line 225, column 4 to column 31)",
  " (in 'odeTK', line 227, column 6 to column 37)",
  " (in 'odeTK', line 226, column 21 to line 228, column 5)",
  " (in 'odeTK', line 226, column 4 to line 228, column 5)",
  " (in 'odeTK', line 224, column 19 to line 229, column 3)",
  " (in 'odeTK', line 224, column 2 to line 229, column 3)",
  " (in 'odeTK', line 233, column 6 to column 72)",
  " (in 'odeTK', line 232, column 21 to line 234, column 5)",
  " (in 'odeTK', line 232, column 4 to line 234, column 5)",
  " (in 'odeTK', line 231, column 16 to line 235, column 3)",
  " (in 'odeTK', line 231, column 2 to line 235, column 3)",
  " (in 'odeTK', line 239, column 2 to column 43)",
  " (in 'odeTK', line 240, column 2 to column 43)",
  " (in 'odeTK', line 241, column 2 to column 43)",
  " (in 'odeTK', line 242, column 2 to column 44)",
  " (in 'odeTK', line 243, column 2 to column 55)",
  " (in 'odeTK', line 244, column 2 to column 54)",
  " (in 'odeTK', line 246, column 5 to column 58)",
  " (in 'odeTK', line 247, column 5 to column 59)",
  " (in 'odeTK', line 248, column 5 to column 49)",
  " (in 'odeTK', line 245, column 16 to line 249, column 3)",
  " (in 'odeTK', line 245, column 2 to line 249, column 3)",
  " (in 'odeTK', line 255, column 8 to column 78)",
  " (in 'odeTK', line 254, column 33 to line 256, column 7)",
  " (in 'odeTK', line 254, column 6 to line 256, column 7)",
  " (in 'odeTK', line 260, column 10 to column 83)",
  " (in 'odeTK', line 259, column 34 to line 261, column 9)",
  " (in 'odeTK', line 259, column 8 to line 261, column 9)",
  " (in 'odeTK', line 258, column 23 to line 262, column 7)",
  " (in 'odeTK', line 258, column 6 to line 262, column 7)",
  " (in 'odeTK', line 252, column 23 to line 263, column 5)",
  " (in 'odeTK', line 252, column 4 to line 263, column 5)",
  " (in 'odeTK', line 268, column 8 to column 78)",
  " (in 'odeTK', line 267, column 33 to line 269, column 7)",
  " (in 'odeTK', line 267, column 6 to line 269, column 7)",
  " (in 'odeTK', line 273, column 10 to column 82)",
  " (in 'odeTK', line 272, column 34 to line 274, column 9)",
  " (in 'odeTK', line 272, column 8 to line 274, column 9)",
  " (in 'odeTK', line 271, column 23 to line 275, column 7)",
  " (in 'odeTK', line 271, column 6 to line 275, column 7)",
  " (in 'odeTK', line 265, column 31 to line 276, column 5)",
  " (in 'odeTK', line 265, column 4 to line 276, column 5)",
  " (in 'odeTK', line 281, column 10 to column 79)",
  " (in 'odeTK', line 280, column 35 to line 282, column 9)",
  " (in 'odeTK', line 280, column 8 to line 282, column 9)",
  " (in 'odeTK', line 279, column 23 to line 283, column 7)",
  " (in 'odeTK', line 279, column 6 to line 283, column 7)",
  " (in 'odeTK', line 278, column 18 to line 284, column 5)",
  " (in 'odeTK', line 278, column 4 to line 284, column 5)",
  " (in 'odeTK', line 250, column 21 to line 285, column 3)",
  " (in 'odeTK', line 250, column 2 to line 285, column 3)",
  " (in 'odeTK', line 116, column 2 to column 22)",
  " (in 'odeTK', line 118, column 2 to column 21)",
  " (in 'odeTK', line 119, column 8 to column 13)",
  " (in 'odeTK', line 119, column 2 to column 24)",
  " (in 'odeTK', line 121, column 2 to column 22)",
  " (in 'odeTK', line 122, column 2 to column 27)",
  " (in 'odeTK', line 123, column 9 to column 19)",
  " (in 'odeTK', line 123, column 2 to column 30)",
  " (in 'odeTK', line 124, column 9 to column 19)",
  " (in 'odeTK', line 124, column 21 to column 26)",
  " (in 'odeTK', line 124, column 2 to column 39)",
  " (in 'odeTK', line 127, column 2 to column 22)",
  " (in 'odeTK', line 128, column 8 to column 13)",
  " (in 'odeTK', line 128, column 15 to column 20)",
  " (in 'odeTK', line 128, column 22 to column 27)",
  " (in 'odeTK', line 128, column 2 to column 40)",
  " (in 'odeTK', line 130, column 2 to column 22)",
  " (in 'odeTK', line 131, column 8 to column 13)",
  " (in 'odeTK', line 131, column 15 to column 20)",
  " (in 'odeTK', line 131, column 22 to column 27)",
  " (in 'odeTK', line 131, column 2 to column 40)",
  " (in 'odeTK', line 134, column 2 to column 25)",
  " (in 'odeTK', line 136, column 2 to column 24)",
  " (in 'odeTK', line 137, column 2 to column 22)",
  " (in 'odeTK', line 138, column 2 to column 20)",
  " (in 'odeTK', line 139, column 2 to column 16)",
  " (in 'odeTK', line 140, column 2 to column 22)",
  " (in 'odeTK', line 141, column 9 to column 15)",
  " (in 'odeTK', line 141, column 2 to column 21)",
  " (in 'odeTK', line 143, column 8 to column 15)",
  " (in 'odeTK', line 143, column 2 to column 25)",
  " (in 'odeTK', line 144, column 2 to column 11)",
  " (in 'odeTK', line 150, column 8 to column 31)",
  " (in 'odeTK', line 150, column 2 to column 43)",
  " (in 'odeTK', line 151, column 2 to column 22)",
  " (in 'odeTK', line 152, column 2 to column 17)",
  " (in 'odeTK', line 154, column 4 to column 27)",
  " (in 'odeTK', line 153, column 24 to line 155, column 3)",
  " (in 'odeTK', line 153, column 2 to line 155, column 3)",
  " (in 'odeTK', line 157, column 4 to column 42)",
  " (in 'odeTK', line 156, column 24 to line 158, column 3)",
  " (in 'odeTK', line 156, column 2 to line 158, column 3)",
  " (in 'odeTK', line 159, column 2 to column 25)",
  " (in 'odeTK', line 160, column 2 to column 20)",
  " (in 'odeTK', line 161, column 2 to column 20)",
  " (in 'odeTK', line 162, column 2 to column 20)",
  " (in 'odeTK', line 163, column 2 to column 20)",
  " (in 'odeTK', line 166, column 9 to column 14)",
  " (in 'odeTK', line 167, column 9 to column 14)",
  " (in 'odeTK', line 168, column 9 to column 14)",
  " (in 'odeTK', line 169, column 9 to column 14)",
  " (in 'odeTK', line 170, column 8 to column 13)",
  " (in 'odeTK', line 171, column 18 to column 23)",
  " (in 'odeTK', line 172, column 8 to column 17)",
  " (in 'odeTK', line 173, column 8 to column 16)",
  " (in 'odeTK', line 177, column 18 to column 23)",
  " (in 'odeTK', line 178, column 18 to column 23)",
  " (in 'odeTK', line 179, column 18 to column 23)",
  " (in 'odeTK', line 180, column 18 to column 23)",
  " (in 'odeTK', line 183, column 9 to column 14)",
  " (in 'odeTK', line 183, column 16 to column 21)",
  " (in 'odeTK', line 185, column 9 to column 14)",
  " (in 'odeTK', line 185, column 15 to column 20)",
  " (in 'odeTK', line 186, column 9 to column 14)",
  " (in 'odeTK', line 186, column 15 to column 20)",
  " (in 'odeTK', line 189, column 8 to column 13)",
  " (in 'odeTK', line 189, column 15 to column 22)",
  " (in 'odeTK', line 191, column 8 to column 31)",
  " (in 'odeTK', line 4, column 2 to column 13)",
  " (in 'odeTK', line 12, column 6 to column 15)",
  " (in 'odeTK', line 11, column 24 to line 13, column 5)",
  " (in 'odeTK', line 11, column 4 to line 13, column 5)",
  " (in 'odeTK', line 14, column 4 to column 14)",
  " (in 'odeTK', line 10, column 9 to line 15, column 3)",
  " (in 'odeTK', line 9, column 4 to column 14)",
  " (in 'odeTK', line 8, column 39 to line 10, column 3)",
  " (in 'odeTK', line 8, column 9 to line 15, column 3)",
  " (in 'odeTK', line 6, column 4 to column 30)",
  " (in 'odeTK', line 7, column 4 to column 14)",
  " (in 'odeTK', line 5, column 18 to line 8, column 3)",
  " (in 'odeTK', line 5, column 2 to line 15, column 3)",
  " (in 'odeTK', line 3, column 33 to line 16, column 1)",
  " (in 'odeTK', line 22, column 4 to column 16)",
  " (in 'odeTK', line 21, column 8 to line 23, column 3)",
  " (in 'odeTK', line 19, column 4 to column 33)",
  " (in 'odeTK', line 20, column 4 to column 90)",
  " (in 'odeTK', line 18, column 36 to line 21, column 3)",
  " (in 'odeTK', line 18, column 2 to line 23, column 3)",
  " (in 'odeTK', line 17, column 48 to line 24, column 1)",
  " (in 'odeTK', line 32, column 2 to column 27)",
  " (in 'odeTK', line 33, column 2 to column 22)",
  " (in 'odeTK', line 34, column 2 to column 22)",
  " (in 'odeTK', line 35, column 2 to column 22)",
  " (in 'odeTK', line 36, column 2 to column 22)",
  " (in 'odeTK', line 37, column 8 to column 13)",
  " (in 'odeTK', line 37, column 2 to column 41)",
  " (in 'odeTK', line 38, column 8 to column 13)",
  " (in 'odeTK', line 38, column 2 to column 57)",
  " (in 'odeTK', line 39, column 8 to column 13)",
  " (in 'odeTK', line 39, column 2 to column 69)",
  " (in 'odeTK', line 40, column 8 to column 13)",
  " (in 'odeTK', line 40, column 2 to column 82)",
  " (in 'odeTK', line 42, column 8 to column 15)",
  " (in 'odeTK', line 42, column 2 to column 28)",
  " (in 'odeTK', line 43, column 2 to column 22)",
  " (in 'odeTK', line 45, column 9 to column 19)",
  " (in 'odeTK', line 45, column 2 to column 65)",
  " (in 'odeTK', line 48, column 9 to column 19)",
  " (in 'odeTK', line 48, column 2 to column 91)",
  " (in 'odeTK', line 50, column 2 to column 10)",
  " (in 'odeTK', line 51, column 2 to column 10)",
  " (in 'odeTK', line 52, column 2 to column 10)",
  " (in 'odeTK', line 56, column 4 to column 17)",
  " (in 'odeTK', line 55, column 8 to line 57, column 3)",
  " (in 'odeTK', line 54, column 4 to column 11)",
  " (in 'odeTK', line 53, column 16 to line 55, column 3)",
  " (in 'odeTK', line 53, column 2 to line 57, column 3)",
  " (in 'odeTK', line 58, column 2 to column 15)",
  " (in 'odeTK', line 61, column 2 to column 50)",
  " (in 'odeTK', line 72, column 4 to column 32)",
  " (in 'odeTK', line 70, column 8 to line 73, column 3)",
  " (in 'odeTK', line 69, column 4 to column 34)",
  " (in 'odeTK', line 67, column 15 to line 70, column 3)",
  " (in 'odeTK', line 67, column 2 to line 73, column 3)",
  " (in 'odeTK', line 76, column 6 to column 46)",
  " (in 'odeTK', line 75, column 25 to line 77, column 5)",
  " (in 'odeTK', line 75, column 4 to line 77, column 5)",
  " (in 'odeTK', line 74, column 15 to line 78, column 3)",
  " (in 'odeTK', line 74, column 2 to line 78, column 3)",
  " (in 'odeTK', line 79, column 2 to column 16)",
  " (in 'odeTK', line 30, column 30 to line 80, column 1)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
int findfirst(const T0__& t, const T1__& xt_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>>
interpolate(const T0__& x, const T1__& xpt_arg__, const T2__& ypt_arg__,
            std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
odeTK(const T0__& t, const std::vector<T1__>& y, const std::vector<T2__>&
      theta, const std::vector<T3__>& x_r, const std::vector<int>& x_i,
      std::ostream* pstream__);
struct odeTK_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  operator()(const T0__& t, const std::vector<T1__>& y,
             const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) const {
    return odeTK(t, y, theta, x_r, x_i, pstream__);
  }
};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
int findfirst(const T0__& t, const T1__& xt_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& xt = stan::math::to_ref(xt_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int i = std::numeric_limits<int>::min();
    current_statement__ = 160;
    i = 0;
    current_statement__ = 172;
    if (stan::math::logical_eq(t, stan::math::max(xt))) {
      current_statement__ = 169;
      i = (stan::math::num_elements(xt) - 1);
      current_statement__ = 170;
      return i;
    } else {
      current_statement__ = 168;
      if ((stan::math::primitive_value(
             stan::math::logical_lt(t, stan::math::min(xt)))
          ||
          stan::math::primitive_value(
            stan::math::logical_gt(t, stan::math::max(xt))))) {
        current_statement__ = 166;
        return i;
      } else {
        current_statement__ = 163;
        while (stan::math::logical_gte(t,
                 stan::model::rvalue(xt, "xt",
                   stan::model::index_uni((i + 1))))) {
          current_statement__ = 161;
          i = (i + 1);
        }
        current_statement__ = 164;
        return i;
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>>
interpolate(const T0__& x, const T1__& xpt_arg__, const T2__& ypt_arg__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& xpt = stan::math::to_ref(xpt_arg__);
  const auto& ypt = stan::math::to_ref(ypt_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 179;
    if ((stan::math::primitive_value(
           stan::math::logical_gte(x, stan::math::min(xpt)))
        &&
        stan::math::primitive_value(
          stan::math::logical_lte(x, stan::math::max(xpt))))) {
      int idx = std::numeric_limits<int>::min();
      current_statement__ = 176;
      idx = findfirst(x, xpt, pstream__);
      current_statement__ = 177;
      return (stan::model::rvalue(ypt, "ypt", stan::model::index_uni(idx)) +
             (((x -
             stan::model::rvalue(xpt, "xpt", stan::model::index_uni(idx))) *
             (stan::model::rvalue(ypt, "ypt",
                stan::model::index_uni((idx + 1)))
             - stan::model::rvalue(ypt, "ypt", stan::model::index_uni(idx))))
             /
             (stan::model::rvalue(xpt, "xpt",
                stan::model::index_uni((idx + 1)))
             -
             stan::model::rvalue(xpt, "xpt", stan::model::index_uni(idx)))));
    } else {
      current_statement__ = 174;
      return 0.0;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
odeTK(const T0__& t, const std::vector<T1__>& y, const std::vector<T2__>&
      theta, const std::vector<T3__>& x_r, const std::vector<int>& x_i,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int lentp_rmNA = std::numeric_limits<int>::min();
    current_statement__ = 181;
    lentp_rmNA = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(1));
    int lentp = std::numeric_limits<int>::min();
    current_statement__ = 182;
    lentp = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(2));
    int n_exp = std::numeric_limits<int>::min();
    current_statement__ = 183;
    n_exp = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(3));
    int n_out = std::numeric_limits<int>::min();
    current_statement__ = 184;
    n_out = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(4));
    int n_met = std::numeric_limits<int>::min();
    current_statement__ = 185;
    n_met = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(5));
    current_statement__ = 186;
    stan::math::validate_non_negative_index("ku", "n_exp", n_exp);
    std::vector<local_scalar_t__> ku =
      std::vector<local_scalar_t__>(n_exp, DUMMY_VAR__);
    current_statement__ = 187;
    stan::model::assign(ku,
      stan::model::rvalue(theta, "theta",
        stan::model::index_min_max(1, n_exp)), "assigning variable ku");
    current_statement__ = 188;
    stan::math::validate_non_negative_index("ke", "n_out", n_out);
    std::vector<local_scalar_t__> ke =
      std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
    current_statement__ = 189;
    stan::model::assign(ke,
      stan::model::rvalue(theta, "theta",
        stan::model::index_min_max((n_exp + 1), (n_exp + n_out))),
      "assigning variable ke");
    current_statement__ = 190;
    stan::math::validate_non_negative_index("km", "n_met", n_met);
    std::vector<local_scalar_t__> km =
      std::vector<local_scalar_t__>(n_met, DUMMY_VAR__);
    current_statement__ = 191;
    stan::model::assign(km,
      stan::model::rvalue(theta, "theta",
        stan::model::index_min_max(((n_exp + n_out) + 1), ((n_exp + n_out) +
          n_met))), "assigning variable km");
    current_statement__ = 192;
    stan::math::validate_non_negative_index("kem", "n_met", n_met);
    std::vector<local_scalar_t__> kem =
      std::vector<local_scalar_t__>(n_met, DUMMY_VAR__);
    current_statement__ = 193;
    stan::model::assign(kem,
      stan::model::rvalue(theta, "theta",
        stan::model::index_min_max((((n_exp + n_out) + n_met) + 1), (((n_exp
          + n_out) + n_met) + n_met))), "assigning variable kem");
    current_statement__ = 194;
    stan::math::validate_non_negative_index("dydt", "1 + n_met", (1 + n_met));
    std::vector<local_scalar_t__> dydt =
      std::vector<local_scalar_t__>((1 + n_met), DUMMY_VAR__);
    local_scalar_t__ tacc = DUMMY_VAR__;
    current_statement__ = 196;
    tacc = stan::model::rvalue(x_r, "x_r", stan::model::index_uni(1));
    current_statement__ = 197;
    stan::math::validate_non_negative_index("tp_rmNA", "lentp_rmNA",
      lentp_rmNA);
    Eigen::Matrix<local_scalar_t__,-1,1> tp_rmNA =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lentp_rmNA, DUMMY_VAR__);
    current_statement__ = 198;
    stan::model::assign(tp_rmNA,
      stan::math::to_vector(
        stan::model::rvalue(x_r, "x_r",
          stan::model::index_min_max(2, (lentp_rmNA + 1)))),
      "assigning variable tp_rmNA");
    current_statement__ = 199;
    stan::math::validate_non_negative_index("Cexp_rmNA", "lentp_rmNA",
      lentp_rmNA);
    Eigen::Matrix<local_scalar_t__,-1,1> Cexp_rmNA =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lentp_rmNA, DUMMY_VAR__);
    current_statement__ = 200;
    stan::model::assign(Cexp_rmNA,
      stan::math::to_vector(
        stan::model::rvalue(x_r, "x_r",
          stan::model::index_min_max((lentp_rmNA + 2), ((lentp_rmNA + 1) +
            lentp_rmNA)))), "assigning variable Cexp_rmNA");
    local_scalar_t__ U = DUMMY_VAR__;
    local_scalar_t__ M = DUMMY_VAR__;
    local_scalar_t__ E = DUMMY_VAR__;
    current_statement__ = 208;
    if (stan::math::logical_eq(n_met, 0)) {
      current_statement__ = 206;
      M = 0;
    } else {
      current_statement__ = 204;
      M = stan::math::sum(km);
    }
    current_statement__ = 209;
    E = stan::math::sum(ke);
    current_statement__ = 210;
    U = (stan::model::rvalue(ku, "ku", stan::model::index_uni(1)) *
      interpolate(t, tp_rmNA, Cexp_rmNA, pstream__));
    current_statement__ = 215;
    if (stan::math::logical_lte(t, tacc)) {
      current_statement__ = 213;
      stan::model::assign(dydt, (U - ((E + M) *
        stan::model::rvalue(y, "y", stan::model::index_uni(1)))),
        "assigning variable dydt", stan::model::index_uni(1));
    } else {
      current_statement__ = 211;
      stan::model::assign(dydt, (-(E + M) *
        stan::model::rvalue(y, "y", stan::model::index_uni(1))),
        "assigning variable dydt", stan::model::index_uni(1));
    }
    current_statement__ = 220;
    if (stan::math::logical_gt(n_met, 0)) {
      current_statement__ = 218;
      for (int i = 2; i <= (n_met + 1); ++i) {
        current_statement__ = 216;
        stan::model::assign(dydt,
          ((stan::model::rvalue(km, "km", stan::model::index_uni(i)) *
          stan::model::rvalue(y, "y", stan::model::index_uni(1))) -
          (stan::model::rvalue(kem, "kem", stan::model::index_uni(i)) *
          stan::model::rvalue(y, "y", stan::model::index_uni(i)))),
          "assigning variable dydt", stan::model::index_uni(i));
      }
    }
    current_statement__ = 221;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_odeTK final : public model_base_crtp<model_odeTK> {
private:
  int n_rep;
  int lentp;
  std::vector<double> tp;
  int n_exp;
  int lentp_rmNA;
  Eigen::Matrix<double,-1,1> tp_rmNA_data__;
  Eigen::Matrix<double,-1,-1> Cexp_rmNA_data__;
  int n_out;
  std::vector<std::vector<std::vector<double>>> CGobs;
  int n_met;
  std::vector<std::vector<std::vector<double>>> Cmet;
  double gmaxsup;
  int rankacc;
  double tacc;
  double C0;
  double unifMax;
  int len_vt;
  Eigen::Matrix<double,-1,1> vt_data__;
  std::vector<double> y0;
  double t0;
  std::vector<double> x_r;
  std::vector<int> x_int;
  int gmax_1dim__;
  int G0_1dim__;
  int y_sim_2dim__;
  int theta_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> tp_rmNA{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Cexp_rmNA{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> vt{nullptr, 0};
public:
  ~model_odeTK() {}
  model_odeTK(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_odeTK_namespace::model_odeTK";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 92;
      context__.validate_dims("data initialization", "n_rep", "int",
        std::vector<size_t>{});
      n_rep = std::numeric_limits<int>::min();
      current_statement__ = 92;
      n_rep = context__.vals_i("n_rep")[(1 - 1)];
      current_statement__ = 92;
      stan::math::check_greater_or_equal(function__, "n_rep", n_rep, 0);
      current_statement__ = 93;
      context__.validate_dims("data initialization", "lentp", "int",
        std::vector<size_t>{});
      lentp = std::numeric_limits<int>::min();
      current_statement__ = 93;
      lentp = context__.vals_i("lentp")[(1 - 1)];
      current_statement__ = 93;
      stan::math::check_greater_or_equal(function__, "lentp", lentp, 0);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("tp", "lentp", lentp);
      current_statement__ = 95;
      context__.validate_dims("data initialization", "tp", "double",
        std::vector<size_t>{static_cast<size_t>(lentp)});
      tp = std::vector<double>(lentp,
             std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 95;
      tp = context__.vals_r("tp");
      current_statement__ = 96;
      context__.validate_dims("data initialization", "n_exp", "int",
        std::vector<size_t>{});
      n_exp = std::numeric_limits<int>::min();
      current_statement__ = 96;
      n_exp = context__.vals_i("n_exp")[(1 - 1)];
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "n_exp", n_exp, 0);
      current_statement__ = 97;
      context__.validate_dims("data initialization", "lentp_rmNA", "int",
        std::vector<size_t>{});
      lentp_rmNA = std::numeric_limits<int>::min();
      current_statement__ = 97;
      lentp_rmNA = context__.vals_i("lentp_rmNA")[(1 - 1)];
      current_statement__ = 97;
      stan::math::check_greater_or_equal(function__, "lentp_rmNA",
        lentp_rmNA, 0);
      current_statement__ = 98;
      stan::math::validate_non_negative_index("tp_rmNA", "lentp_rmNA",
        lentp_rmNA);
      current_statement__ = 99;
      context__.validate_dims("data initialization", "tp_rmNA", "double",
        std::vector<size_t>{static_cast<size_t>(lentp_rmNA)});
      tp_rmNA_data__ = Eigen::Matrix<double,-1,1>::Constant(lentp_rmNA,
                         std::numeric_limits<double>::quiet_NaN());
      new (&tp_rmNA)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(tp_rmNA_data__.data(),
        lentp_rmNA);
      {
        std::vector<local_scalar_t__> tp_rmNA_flat__;
        current_statement__ = 99;
        tp_rmNA_flat__ = context__.vals_r("tp_rmNA");
        current_statement__ = 99;
        pos__ = 1;
        current_statement__ = 99;
        for (int sym1__ = 1; sym1__ <= lentp_rmNA; ++sym1__) {
          current_statement__ = 99;
          stan::model::assign(tp_rmNA, tp_rmNA_flat__[(pos__ - 1)],
            "assigning variable tp_rmNA", stan::model::index_uni(sym1__));
          current_statement__ = 99;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 100;
      stan::math::validate_non_negative_index("Cexp_rmNA", "lentp_rmNA",
        lentp_rmNA);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("Cexp_rmNA", "n_exp", n_exp);
      current_statement__ = 102;
      context__.validate_dims("data initialization", "Cexp_rmNA", "double",
        std::vector<size_t>{static_cast<size_t>(lentp_rmNA),
          static_cast<size_t>(n_exp)});
      Cexp_rmNA_data__ = Eigen::Matrix<double,-1,-1>::Constant(lentp_rmNA,
                           n_exp, std::numeric_limits<double>::quiet_NaN());
      new (&Cexp_rmNA)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(Cexp_rmNA_data__.data(),
        lentp_rmNA, n_exp);
      {
        std::vector<local_scalar_t__> Cexp_rmNA_flat__;
        current_statement__ = 102;
        Cexp_rmNA_flat__ = context__.vals_r("Cexp_rmNA");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
          current_statement__ = 102;
          for (int sym2__ = 1; sym2__ <= lentp_rmNA; ++sym2__) {
            current_statement__ = 102;
            stan::model::assign(Cexp_rmNA, Cexp_rmNA_flat__[(pos__ - 1)],
              "assigning variable Cexp_rmNA", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 102;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 103;
      context__.validate_dims("data initialization", "n_out", "int",
        std::vector<size_t>{});
      n_out = std::numeric_limits<int>::min();
      current_statement__ = 103;
      n_out = context__.vals_i("n_out")[(1 - 1)];
      current_statement__ = 103;
      stan::math::check_greater_or_equal(function__, "n_out", n_out, 0);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("CGobs", "lentp", lentp);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("CGobs", "n_out", n_out);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("CGobs", "n_rep", n_rep);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "CGobs", "double",
        std::vector<size_t>{static_cast<size_t>(lentp),
          static_cast<size_t>(n_out), static_cast<size_t>(n_rep)});
      CGobs = std::vector<std::vector<std::vector<double>>>(lentp,
                std::vector<std::vector<double>>(n_out,
                  std::vector<double>(n_rep,
                    std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> CGobs_flat__;
        current_statement__ = 107;
        CGobs_flat__ = context__.vals_r("CGobs");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 107;
            for (int sym3__ = 1; sym3__ <= lentp; ++sym3__) {
              current_statement__ = 107;
              stan::model::assign(CGobs, CGobs_flat__[(pos__ - 1)],
                "assigning variable CGobs", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 107;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 108;
      context__.validate_dims("data initialization", "n_met", "int",
        std::vector<size_t>{});
      n_met = std::numeric_limits<int>::min();
      current_statement__ = 108;
      n_met = context__.vals_i("n_met")[(1 - 1)];
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "n_met", n_met, 0);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("Cmet", "lentp", lentp);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("Cmet", "n_met", n_met);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("Cmet", "n_rep", n_rep);
      current_statement__ = 112;
      context__.validate_dims("data initialization", "Cmet", "double",
        std::vector<size_t>{static_cast<size_t>(lentp),
          static_cast<size_t>(n_met), static_cast<size_t>(n_rep)});
      Cmet = std::vector<std::vector<std::vector<double>>>(lentp,
               std::vector<std::vector<double>>(n_met,
                 std::vector<double>(n_rep,
                   std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> Cmet_flat__;
        current_statement__ = 112;
        Cmet_flat__ = context__.vals_r("Cmet");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 112;
          for (int sym2__ = 1; sym2__ <= n_met; ++sym2__) {
            current_statement__ = 112;
            for (int sym3__ = 1; sym3__ <= lentp; ++sym3__) {
              current_statement__ = 112;
              stan::model::assign(Cmet, Cmet_flat__[(pos__ - 1)],
                "assigning variable Cmet", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 112;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 113;
      context__.validate_dims("data initialization", "gmaxsup", "double",
        std::vector<size_t>{});
      gmaxsup = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 113;
      gmaxsup = context__.vals_r("gmaxsup")[(1 - 1)];
      current_statement__ = 113;
      stan::math::check_greater_or_equal(function__, "gmaxsup", gmaxsup, 0);
      current_statement__ = 114;
      context__.validate_dims("data initialization", "rankacc", "int",
        std::vector<size_t>{});
      rankacc = std::numeric_limits<int>::min();
      current_statement__ = 114;
      rankacc = context__.vals_i("rankacc")[(1 - 1)];
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "rankacc", rankacc, 0);
      current_statement__ = 115;
      context__.validate_dims("data initialization", "tacc", "double",
        std::vector<size_t>{});
      tacc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 115;
      tacc = context__.vals_r("tacc")[(1 - 1)];
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "tacc", tacc, 0);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "C0", "double",
        std::vector<size_t>{});
      C0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 116;
      C0 = context__.vals_r("C0")[(1 - 1)];
      current_statement__ = 116;
      stan::math::check_greater_or_equal(function__, "C0", C0, 0);
      current_statement__ = 117;
      context__.validate_dims("data initialization", "unifMax", "double",
        std::vector<size_t>{});
      unifMax = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 117;
      unifMax = context__.vals_r("unifMax")[(1 - 1)];
      current_statement__ = 118;
      context__.validate_dims("data initialization", "len_vt", "int",
        std::vector<size_t>{});
      len_vt = std::numeric_limits<int>::min();
      current_statement__ = 118;
      len_vt = context__.vals_i("len_vt")[(1 - 1)];
      current_statement__ = 118;
      stan::math::check_greater_or_equal(function__, "len_vt", len_vt, 0);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("vt", "len_vt", len_vt);
      current_statement__ = 120;
      context__.validate_dims("data initialization", "vt", "double",
        std::vector<size_t>{static_cast<size_t>(len_vt)});
      vt_data__ = Eigen::Matrix<double,-1,1>::Constant(len_vt,
                    std::numeric_limits<double>::quiet_NaN());
      new (&vt) Eigen::Map<Eigen::Matrix<double,-1,1>>(vt_data__.data(),
        len_vt);
      {
        std::vector<local_scalar_t__> vt_flat__;
        current_statement__ = 120;
        vt_flat__ = context__.vals_r("vt");
        current_statement__ = 120;
        pos__ = 1;
        current_statement__ = 120;
        for (int sym1__ = 1; sym1__ <= len_vt; ++sym1__) {
          current_statement__ = 120;
          stan::model::assign(vt, vt_flat__[(pos__ - 1)],
            "assigning variable vt", stan::model::index_uni(sym1__));
          current_statement__ = 120;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 121;
      stan::math::validate_non_negative_index("y0", "1 + n_met", (1 + n_met));
      current_statement__ = 122;
      context__.validate_dims("data initialization", "y0", "double",
        std::vector<size_t>{static_cast<size_t>((1 + n_met))});
      y0 = std::vector<double>((1 + n_met),
             std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 122;
      y0 = context__.vals_r("y0");
      current_statement__ = 123;
      context__.validate_dims("data initialization", "t0", "double",
        std::vector<size_t>{});
      t0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 123;
      t0 = context__.vals_r("t0")[(1 - 1)];
      current_statement__ = 124;
      stan::math::validate_non_negative_index("x_r",
        "1 + lentp_rmNA + lentp_rmNA", ((1 + lentp_rmNA) + lentp_rmNA));
      current_statement__ = 125;
      x_r = std::vector<double>(((1 + lentp_rmNA) + lentp_rmNA),
              std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 126;
      x_int = std::vector<int>(5, std::numeric_limits<int>::min());
      current_statement__ = 127;
      stan::model::assign(x_r, tacc, "assigning variable x_r",
        stan::model::index_uni(1));
      current_statement__ = 130;
      for (int i = 1; i <= lentp_rmNA; ++i) {
        current_statement__ = 128;
        stan::model::assign(x_r,
          stan::model::rvalue(tp_rmNA, "tp_rmNA", stan::model::index_uni(i)),
          "assigning variable x_r", stan::model::index_uni((1 + i)));
      }
      current_statement__ = 133;
      for (int i = 1; i <= lentp_rmNA; ++i) {
        current_statement__ = 131;
        stan::model::assign(x_r,
          stan::model::rvalue(Cexp_rmNA, "Cexp_rmNA",
            stan::model::index_uni(i), stan::model::index_uni(1)),
          "assigning variable x_r",
          stan::model::index_uni(((i + lentp_rmNA) + 1)));
      }
      current_statement__ = 134;
      stan::model::assign(x_int, lentp_rmNA, "assigning variable x_int",
        stan::model::index_uni(1));
      current_statement__ = 135;
      stan::model::assign(x_int, lentp, "assigning variable x_int",
        stan::model::index_uni(2));
      current_statement__ = 136;
      stan::model::assign(x_int, n_exp, "assigning variable x_int",
        stan::model::index_uni(3));
      current_statement__ = 137;
      stan::model::assign(x_int, n_out, "assigning variable x_int",
        stan::model::index_uni(4));
      current_statement__ = 138;
      stan::model::assign(x_int, n_met, "assigning variable x_int",
        stan::model::index_uni(5));
      current_statement__ = 139;
      stan::math::validate_non_negative_index("log10ku", "n_exp", n_exp);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("log10ke", "n_out", n_out);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("log10km", "n_met", n_met);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("log10kem", "n_met", n_met);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("sigmaCGpred", "n_out", n_out);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("sigmaCmetpred", "n_met", n_met);
      current_statement__ = 145;
      gmax_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 145;
      gmax_1dim__ = (n_out - 1);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("gmax", "n_out - 1",
        gmax_1dim__);
      current_statement__ = 146;
      G0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 146;
      G0_1dim__ = (n_out - 1);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("G0", "n_out - 1", G0_1dim__);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("ku", "n_exp", n_exp);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("ke", "n_out", n_out);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("km", "n_met", n_met);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("kem", "n_met", n_met);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("Cexp", "lentp", lentp);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("Cexp", "n_exp", n_exp);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("CGpred", "lentp", lentp);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("CGpred", "n_out", n_out);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("Cmetpred", "lentp", lentp);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("Cmetpred", "n_met", n_met);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("y_sim", "lentp", lentp);
      current_statement__ = 158;
      y_sim_2dim__ = std::numeric_limits<int>::min();
      current_statement__ = 158;
      y_sim_2dim__ = (1 + n_met);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("y_sim", "1 + n_met",
        y_sim_2dim__);
      current_statement__ = 159;
      theta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 159;
      theta_1dim__ = (((n_exp + n_out) + n_met) + n_met);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("theta",
        "n_exp + n_out + n_met + n_met", theta_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_exp + n_out + n_met + n_met + n_out + n_met +
      gmax_1dim__ + G0_1dim__;
  }
  inline std::string model_name() const final {
    return "model_odeTK";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_odeTK_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> log10ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_exp, DUMMY_VAR__);
      current_statement__ = 1;
      log10ku = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_exp);
      Eigen::Matrix<local_scalar_t__,-1,1> log10ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_out, DUMMY_VAR__);
      current_statement__ = 2;
      log10ke = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_out);
      Eigen::Matrix<local_scalar_t__,-1,1> log10km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 3;
      log10km = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_met);
      Eigen::Matrix<local_scalar_t__,-1,1> log10kem =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 4;
      log10kem = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(n_met);
      std::vector<local_scalar_t__> sigmaCGpred =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 5;
      sigmaCGpred = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                      n_out);
      Eigen::Matrix<local_scalar_t__,-1,1> sigmaCmetpred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 6;
      sigmaCmetpred = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                        lp__, n_met);
      std::vector<local_scalar_t__> gmax =
        std::vector<local_scalar_t__>(gmax_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      gmax = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, gmax_1dim__);
      std::vector<local_scalar_t__> G0 =
        std::vector<local_scalar_t__>(G0_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      G0 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, G0_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_exp, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_out, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> kem =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Cexp =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lentp, n_exp,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> CGpred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lentp, n_out,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Cmetpred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lentp, n_met,
          DUMMY_VAR__);
      std::vector<std::vector<local_scalar_t__>> y_sim =
        std::vector<std::vector<local_scalar_t__>>(lentp,
          std::vector<local_scalar_t__>(y_sim_2dim__, DUMMY_VAR__));
      std::vector<local_scalar_t__> theta =
        std::vector<local_scalar_t__>(theta_1dim__, DUMMY_VAR__);
      current_statement__ = 20;
      for (int i = 1; i <= n_exp; ++i) {
        current_statement__ = 18;
        stan::model::assign(ku,
          stan::math::pow(10,
            stan::model::rvalue(log10ku, "log10ku", stan::model::index_uni(i))),
          "assigning variable ku", stan::model::index_uni(i));
      }
      current_statement__ = 23;
      for (int i = 1; i <= n_out; ++i) {
        current_statement__ = 21;
        stan::model::assign(ke,
          stan::math::pow(10,
            stan::model::rvalue(log10ke, "log10ke", stan::model::index_uni(i))),
          "assigning variable ke", stan::model::index_uni(i));
      }
      current_statement__ = 27;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 24;
        stan::model::assign(km,
          stan::math::pow(10,
            stan::model::rvalue(log10km, "log10km", stan::model::index_uni(i))),
          "assigning variable km", stan::model::index_uni(i));
        current_statement__ = 25;
        stan::model::assign(kem,
          stan::math::pow(10,
            stan::model::rvalue(log10kem, "log10kem",
              stan::model::index_uni(i))), "assigning variable kem",
          stan::model::index_uni(i));
      }
      current_statement__ = 30;
      for (int i = 1; i <= n_exp; ++i) {
        current_statement__ = 28;
        stan::model::assign(theta,
          stan::model::rvalue(ku, "ku", stan::model::index_uni(i)),
          "assigning variable theta", stan::model::index_uni(i));
      }
      current_statement__ = 33;
      for (int i = 1; i <= n_out; ++i) {
        current_statement__ = 31;
        stan::model::assign(theta,
          stan::model::rvalue(ke, "ke", stan::model::index_uni(i)),
          "assigning variable theta", stan::model::index_uni((n_exp + i)));
      }
      current_statement__ = 36;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 34;
        stan::model::assign(theta,
          stan::model::rvalue(km, "km", stan::model::index_uni(i)),
          "assigning variable theta",
          stan::model::index_uni(((n_exp + n_out) + i)));
      }
      current_statement__ = 39;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 37;
        stan::model::assign(theta,
          stan::model::rvalue(kem, "kem", stan::model::index_uni(i)),
          "assigning variable theta",
          stan::model::index_uni((((n_exp + n_out) + n_met) + i)));
      }
      current_statement__ = 40;
      stan::model::assign(y_sim,
        stan::math::integrate_ode_rk45(odeTK_functor__(), y0, t0, tp, theta,
          x_r, x_int, pstream__), "assigning variable y_sim");
      current_statement__ = 46;
      for (int t = 1; t <= lentp; ++t) {
        current_statement__ = 41;
        stan::model::assign(CGpred,
          stan::model::rvalue(y_sim, "y_sim", stan::model::index_uni(t),
            stan::model::index_uni(1)), "assigning variable CGpred",
          stan::model::index_uni(t), stan::model::index_uni(1));
        current_statement__ = 44;
        for (int i = 1; i <= n_met; ++i) {
          current_statement__ = 42;
          stan::model::assign(Cmetpred,
            stan::model::rvalue(y_sim, "y_sim", stan::model::index_uni(t),
              stan::model::index_uni((i + 1))),
            "assigning variable Cmetpred", stan::model::index_uni(t),
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 51;
      if (stan::math::logical_eq(n_out, 2)) {
        current_statement__ = 49;
        for (int t = 1; t <= lentp; ++t) {
          current_statement__ = 47;
          stan::model::assign(CGpred,
            (((stan::model::rvalue(G0, "G0", stan::model::index_uni(1)) -
            stan::model::rvalue(gmax, "gmax", stan::model::index_uni(1))) *
            stan::math::exp(
              (-stan::model::rvalue(ke, "ke", stan::model::index_uni(2)) *
              stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))) +
            stan::model::rvalue(gmax, "gmax", stan::model::index_uni(1))),
            "assigning variable CGpred", stan::model::index_uni(t),
            stan::model::index_uni(2));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "ku", ku, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "ke", ke, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "km", km, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "kem", kem, 0);
      {
        current_statement__ = 52;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10ku, -5, 5));
        current_statement__ = 53;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10ke, -5, 5));
        current_statement__ = 54;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10km, -5, 5));
        current_statement__ = 55;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10kem, -5, 5));
        current_statement__ = 56;
        lp_accum__.add(stan::math::uniform_lpdf<false>(
                         stan::model::rvalue(sigmaCGpred, "sigmaCGpred",
                           stan::model::index_uni(1)), 0, unifMax));
        current_statement__ = 57;
        lp_accum__.add(stan::math::uniform_lpdf<false>(sigmaCmetpred, 0,
                         unifMax));
        current_statement__ = 62;
        if (stan::math::logical_eq(n_out, 2)) {
          current_statement__ = 58;
          lp_accum__.add(stan::math::uniform_lpdf<false>(
                           stan::model::rvalue(sigmaCGpred, "sigmaCGpred",
                             stan::model::index_uni(2)), 0, unifMax));
          current_statement__ = 59;
          lp_accum__.add(stan::math::uniform_lpdf<false>(
                           stan::model::rvalue(gmax, "gmax",
                             stan::model::index_uni(1)), (gmaxsup / 6),
                           gmaxsup));
          current_statement__ = 60;
          lp_accum__.add(stan::math::uniform_lpdf<false>(
                           stan::model::rvalue(G0, "G0",
                             stan::model::index_uni(1)), 0, gmaxsup));
        }
        current_statement__ = 91;
        for (int rep = 1; rep <= n_rep; ++rep) {
          current_statement__ = 72;
          for (int t = 1; t <= rankacc; ++t) {
            current_statement__ = 65;
            if (stan::math::logical_negation(
                  stan::math::is_inf(
                    stan::model::rvalue(CGobs, "CGobs",
                      stan::model::index_uni(t), stan::model::index_uni(1),
                      stan::model::index_uni(rep))))) {
              current_statement__ = 63;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(CGobs, "CGobs",
                                 stan::model::index_uni(t),
                                 stan::model::index_uni(1),
                                 stan::model::index_uni(rep)),
                               stan::model::rvalue(CGpred, "CGpred",
                                 stan::model::index_uni(t),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(sigmaCGpred,
                                 "sigmaCGpred", stan::model::index_uni(1))));
            }
            current_statement__ = 70;
            for (int i = 1; i <= n_met; ++i) {
              current_statement__ = 68;
              if (stan::math::logical_negation(
                    stan::math::is_inf(
                      stan::model::rvalue(Cmet, "Cmet",
                        stan::model::index_uni(t), stan::model::index_uni(i),
                        stan::model::index_uni(rep))))) {
                current_statement__ = 66;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(Cmet, "Cmet",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(rep)),
                                 stan::model::rvalue(Cmetpred, "Cmetpred",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(sigmaCmetpred,
                                   "sigmaCmetpred", stan::model::index_uni(i))));
              }
            }
          }
          current_statement__ = 82;
          for (int t = (rankacc + 1); t <= lentp; ++t) {
            current_statement__ = 75;
            if (stan::math::logical_negation(
                  stan::math::is_inf(
                    stan::model::rvalue(CGobs, "CGobs",
                      stan::model::index_uni(t), stan::model::index_uni(1),
                      stan::model::index_uni(rep))))) {
              current_statement__ = 73;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(CGobs, "CGobs",
                                 stan::model::index_uni(t),
                                 stan::model::index_uni(1),
                                 stan::model::index_uni(rep)),
                               stan::model::rvalue(CGpred, "CGpred",
                                 stan::model::index_uni(t),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(sigmaCGpred,
                                 "sigmaCGpred", stan::model::index_uni(1))));
            }
            current_statement__ = 80;
            for (int i = 1; i <= n_met; ++i) {
              current_statement__ = 78;
              if (stan::math::logical_negation(
                    stan::math::is_inf(
                      stan::model::rvalue(Cmet, "Cmet",
                        stan::model::index_uni(t), stan::model::index_uni(i),
                        stan::model::index_uni(rep))))) {
                current_statement__ = 76;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(Cmet, "Cmet",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(rep)),
                                 stan::model::rvalue(Cmetpred, "Cmetpred",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(sigmaCmetpred,
                                   "sigmaCmetpred", stan::model::index_uni(i))));
              }
            }
          }
          current_statement__ = 89;
          if (stan::math::logical_eq(n_out, 2)) {
            current_statement__ = 87;
            for (int t = 1; t <= lentp; ++t) {
              current_statement__ = 85;
              if (stan::math::logical_negation(
                    stan::math::is_inf(
                      stan::model::rvalue(CGobs, "CGobs",
                        stan::model::index_uni(t), stan::model::index_uni(2),
                        stan::model::index_uni(rep))))) {
                current_statement__ = 83;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(CGobs, "CGobs",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(2),
                                   stan::model::index_uni(rep)),
                                 stan::model::rvalue(CGpred, "CGpred",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(2)),
                                 stan::model::rvalue(sigmaCGpred,
                                   "sigmaCGpred", stan::model::index_uni(2))));
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_odeTK_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> log10ku =
        Eigen::Matrix<double,-1,1>::Constant(n_exp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      log10ku = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_exp);
      Eigen::Matrix<double,-1,1> log10ke =
        Eigen::Matrix<double,-1,1>::Constant(n_out,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      log10ke = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_out);
      Eigen::Matrix<double,-1,1> log10km =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      log10km = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_met);
      Eigen::Matrix<double,-1,1> log10kem =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      log10kem = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(n_met);
      std::vector<double> sigmaCGpred =
        std::vector<double>(n_out, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      sigmaCGpred = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                      n_out);
      Eigen::Matrix<double,-1,1> sigmaCmetpred =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      sigmaCmetpred = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                        lp__, n_met);
      std::vector<double> gmax =
        std::vector<double>(gmax_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      gmax = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, gmax_1dim__);
      std::vector<double> G0 =
        std::vector<double>(G0_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      G0 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, G0_1dim__);
      Eigen::Matrix<double,-1,1> ku =
        Eigen::Matrix<double,-1,1>::Constant(n_exp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ke =
        Eigen::Matrix<double,-1,1>::Constant(n_out,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> km =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> kem =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Cexp =
        Eigen::Matrix<double,-1,-1>::Constant(lentp, n_exp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> CGpred =
        Eigen::Matrix<double,-1,-1>::Constant(lentp, n_out,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Cmetpred =
        Eigen::Matrix<double,-1,-1>::Constant(lentp, n_met,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<double>> y_sim =
        std::vector<std::vector<double>>(lentp,
          std::vector<double>(y_sim_2dim__,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> theta =
        std::vector<double>(theta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(log10ku);
      out__.write(log10ke);
      out__.write(log10km);
      out__.write(log10kem);
      out__.write(sigmaCGpred);
      out__.write(sigmaCmetpred);
      out__.write(gmax);
      out__.write(G0);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 20;
      for (int i = 1; i <= n_exp; ++i) {
        current_statement__ = 18;
        stan::model::assign(ku,
          stan::math::pow(10,
            stan::model::rvalue(log10ku, "log10ku", stan::model::index_uni(i))),
          "assigning variable ku", stan::model::index_uni(i));
      }
      current_statement__ = 23;
      for (int i = 1; i <= n_out; ++i) {
        current_statement__ = 21;
        stan::model::assign(ke,
          stan::math::pow(10,
            stan::model::rvalue(log10ke, "log10ke", stan::model::index_uni(i))),
          "assigning variable ke", stan::model::index_uni(i));
      }
      current_statement__ = 27;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 24;
        stan::model::assign(km,
          stan::math::pow(10,
            stan::model::rvalue(log10km, "log10km", stan::model::index_uni(i))),
          "assigning variable km", stan::model::index_uni(i));
        current_statement__ = 25;
        stan::model::assign(kem,
          stan::math::pow(10,
            stan::model::rvalue(log10kem, "log10kem",
              stan::model::index_uni(i))), "assigning variable kem",
          stan::model::index_uni(i));
      }
      current_statement__ = 30;
      for (int i = 1; i <= n_exp; ++i) {
        current_statement__ = 28;
        stan::model::assign(theta,
          stan::model::rvalue(ku, "ku", stan::model::index_uni(i)),
          "assigning variable theta", stan::model::index_uni(i));
      }
      current_statement__ = 33;
      for (int i = 1; i <= n_out; ++i) {
        current_statement__ = 31;
        stan::model::assign(theta,
          stan::model::rvalue(ke, "ke", stan::model::index_uni(i)),
          "assigning variable theta", stan::model::index_uni((n_exp + i)));
      }
      current_statement__ = 36;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 34;
        stan::model::assign(theta,
          stan::model::rvalue(km, "km", stan::model::index_uni(i)),
          "assigning variable theta",
          stan::model::index_uni(((n_exp + n_out) + i)));
      }
      current_statement__ = 39;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 37;
        stan::model::assign(theta,
          stan::model::rvalue(kem, "kem", stan::model::index_uni(i)),
          "assigning variable theta",
          stan::model::index_uni((((n_exp + n_out) + n_met) + i)));
      }
      current_statement__ = 40;
      stan::model::assign(y_sim,
        stan::math::integrate_ode_rk45(odeTK_functor__(), y0, t0, tp, theta,
          x_r, x_int, pstream__), "assigning variable y_sim");
      current_statement__ = 46;
      for (int t = 1; t <= lentp; ++t) {
        current_statement__ = 41;
        stan::model::assign(CGpred,
          stan::model::rvalue(y_sim, "y_sim", stan::model::index_uni(t),
            stan::model::index_uni(1)), "assigning variable CGpred",
          stan::model::index_uni(t), stan::model::index_uni(1));
        current_statement__ = 44;
        for (int i = 1; i <= n_met; ++i) {
          current_statement__ = 42;
          stan::model::assign(Cmetpred,
            stan::model::rvalue(y_sim, "y_sim", stan::model::index_uni(t),
              stan::model::index_uni((i + 1))),
            "assigning variable Cmetpred", stan::model::index_uni(t),
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 51;
      if (stan::math::logical_eq(n_out, 2)) {
        current_statement__ = 49;
        for (int t = 1; t <= lentp; ++t) {
          current_statement__ = 47;
          stan::model::assign(CGpred,
            (((stan::model::rvalue(G0, "G0", stan::model::index_uni(1)) -
            stan::model::rvalue(gmax, "gmax", stan::model::index_uni(1))) *
            stan::math::exp(
              (-stan::model::rvalue(ke, "ke", stan::model::index_uni(2)) *
              stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))) +
            stan::model::rvalue(gmax, "gmax", stan::model::index_uni(1))),
            "assigning variable CGpred", stan::model::index_uni(t),
            stan::model::index_uni(2));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "ku", ku, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "ke", ke, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "km", km, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "kem", kem, 0);
      if (emit_transformed_parameters__) {
        out__.write(ku);
        out__.write(ke);
        out__.write(km);
        out__.write(kem);
        out__.write(Cexp);
        out__.write(CGpred);
        out__.write(Cmetpred);
        for (int sym1__ = 1; sym1__ <= y_sim_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
            out__.write(y_sim[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(theta);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> log10ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_exp, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(log10ku,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_exp),
        "assigning variable log10ku");
      out__.write(log10ku);
      Eigen::Matrix<local_scalar_t__,-1,1> log10ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_out, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(log10ke,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_out),
        "assigning variable log10ke");
      out__.write(log10ke);
      Eigen::Matrix<local_scalar_t__,-1,1> log10km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(log10km,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_met),
        "assigning variable log10km");
      out__.write(log10km);
      Eigen::Matrix<local_scalar_t__,-1,1> log10kem =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(log10kem,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_met),
        "assigning variable log10kem");
      out__.write(log10kem);
      std::vector<local_scalar_t__> sigmaCGpred =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(sigmaCGpred,
        in__.read<std::vector<local_scalar_t__>>(n_out),
        "assigning variable sigmaCGpred");
      out__.write_free_lb(0, sigmaCGpred);
      Eigen::Matrix<local_scalar_t__,-1,1> sigmaCmetpred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(sigmaCmetpred,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_met),
        "assigning variable sigmaCmetpred");
      out__.write_free_lb(0, sigmaCmetpred);
      std::vector<local_scalar_t__> gmax =
        std::vector<local_scalar_t__>(gmax_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(gmax,
        in__.read<std::vector<local_scalar_t__>>(gmax_1dim__),
        "assigning variable gmax");
      out__.write_free_lb(0, gmax);
      std::vector<local_scalar_t__> G0 =
        std::vector<local_scalar_t__>(G0_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(G0,
        in__.read<std::vector<local_scalar_t__>>(G0_1dim__),
        "assigning variable G0");
      out__.write_free_lb(0, G0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "log10ku",
        "double", std::vector<size_t>{static_cast<size_t>(n_exp)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "log10ke",
        "double", std::vector<size_t>{static_cast<size_t>(n_out)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "log10km",
        "double", std::vector<size_t>{static_cast<size_t>(n_met)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "log10kem",
        "double", std::vector<size_t>{static_cast<size_t>(n_met)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigmaCGpred",
        "double", std::vector<size_t>{static_cast<size_t>(n_out)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigmaCmetpred",
        "double", std::vector<size_t>{static_cast<size_t>(n_met)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "gmax", "double",
        std::vector<size_t>{static_cast<size_t>(gmax_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "G0", "double",
        std::vector<size_t>{static_cast<size_t>(G0_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> log10ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_exp, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log10ku_flat__;
        current_statement__ = 1;
        log10ku_flat__ = context__.vals_r("log10ku");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(log10ku, log10ku_flat__[(pos__ - 1)],
            "assigning variable log10ku", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log10ku);
      Eigen::Matrix<local_scalar_t__,-1,1> log10ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_out, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log10ke_flat__;
        current_statement__ = 2;
        log10ke_flat__ = context__.vals_r("log10ke");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(log10ke, log10ke_flat__[(pos__ - 1)],
            "assigning variable log10ke", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log10ke);
      Eigen::Matrix<local_scalar_t__,-1,1> log10km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log10km_flat__;
        current_statement__ = 3;
        log10km_flat__ = context__.vals_r("log10km");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(log10km, log10km_flat__[(pos__ - 1)],
            "assigning variable log10km", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log10km);
      Eigen::Matrix<local_scalar_t__,-1,1> log10kem =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log10kem_flat__;
        current_statement__ = 4;
        log10kem_flat__ = context__.vals_r("log10kem");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(log10kem, log10kem_flat__[(pos__ - 1)],
            "assigning variable log10kem", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log10kem);
      std::vector<local_scalar_t__> sigmaCGpred =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 5;
      sigmaCGpred = context__.vals_r("sigmaCGpred");
      out__.write_free_lb(0, sigmaCGpred);
      Eigen::Matrix<local_scalar_t__,-1,1> sigmaCmetpred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigmaCmetpred_flat__;
        current_statement__ = 6;
        sigmaCmetpred_flat__ = context__.vals_r("sigmaCmetpred");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(sigmaCmetpred, sigmaCmetpred_flat__[(pos__ -
            1)], "assigning variable sigmaCmetpred",
            stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigmaCmetpred);
      std::vector<local_scalar_t__> gmax =
        std::vector<local_scalar_t__>(gmax_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      gmax = context__.vals_r("gmax");
      out__.write_free_lb(0, gmax);
      std::vector<local_scalar_t__> G0 =
        std::vector<local_scalar_t__>(G0_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      G0 = context__.vals_r("G0");
      out__.write_free_lb(0, G0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"log10ku", "log10ke", "log10km",
                "log10kem", "sigmaCGpred", "sigmaCmetpred", "gmax", "G0"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"ku", "ke", "km", "kem", "Cexp", "CGpred", "Cmetpred", "y_sim",
             "theta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_exp)},
                std::vector<size_t>{static_cast<size_t>(n_out)},
                std::vector<size_t>{static_cast<size_t>(n_met)},
                std::vector<size_t>{static_cast<size_t>(n_met)},
                std::vector<size_t>{static_cast<size_t>(n_out)},
                std::vector<size_t>{static_cast<size_t>(n_met)},
                std::vector<size_t>{static_cast<size_t>(gmax_1dim__)},
                std::vector<size_t>{static_cast<size_t>(G0_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_exp)},
             std::vector<size_t>{static_cast<size_t>(n_out)},
             std::vector<size_t>{static_cast<size_t>(n_met)},
             std::vector<size_t>{static_cast<size_t>(n_met)},
             std::vector<size_t>{static_cast<size_t>(lentp),
               static_cast<size_t>(n_exp)},
             std::vector<size_t>{static_cast<size_t>(lentp),
               static_cast<size_t>(n_out)},
             std::vector<size_t>{static_cast<size_t>(lentp),
               static_cast<size_t>(n_met)},
             std::vector<size_t>{static_cast<size_t>(lentp),
               static_cast<size_t>(y_sim_2dim__)},
             std::vector<size_t>{static_cast<size_t>(theta_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ku" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ke" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10km" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10kem" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmaCGpred" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmaCmetpred" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gmax_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gmax" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "G0" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ku" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        param_names__.emplace_back(std::string() + "ke" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "km" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "kem" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cexp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "CGpred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cmetpred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= y_sim_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_sim" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ku" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ke" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10km" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10kem" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmaCGpred" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmaCmetpred" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gmax_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gmax" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "G0" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ku" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        param_names__.emplace_back(std::string() + "ke" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "km" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "kem" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cexp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "CGpred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cmetpred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= y_sim_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_sim" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= theta_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"log10ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_exp) + "},\"block\":\"parameters\"},{\"name\":\"log10ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_out) + "},\"block\":\"parameters\"},{\"name\":\"log10km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"log10kem\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"sigmaCGpred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigmaCmetpred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"gmax\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gmax_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"G0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G0_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_exp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kem\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Cexp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_exp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"CGpred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Cmetpred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lentp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(y_sim_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(theta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"log10ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_exp) + "},\"block\":\"parameters\"},{\"name\":\"log10ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_out) + "},\"block\":\"parameters\"},{\"name\":\"log10km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"log10kem\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"sigmaCGpred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigmaCmetpred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"gmax\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gmax_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"G0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G0_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_exp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kem\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Cexp\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_exp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"CGpred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Cmetpred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_sim\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lentp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(y_sim_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(theta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n_exp + n_out) + n_met) + n_met) +
      n_out) + n_met) + gmax_1dim__) + G0_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((n_exp + n_out) + n_met) + n_met) + (lentp * n_exp)) + (lentp *
      n_out)) + (lentp * n_met)) + (lentp * y_sim_2dim__)) + theta_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n_exp + n_out) + n_met) + n_met) +
      n_out) + n_met) + gmax_1dim__) + G0_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((n_exp + n_out) + n_met) + n_met) + (lentp * n_exp)) + (lentp *
      n_out)) + (lentp * n_met)) + (lentp * y_sim_2dim__)) + theta_1dim__));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_odeTK_namespace::model_odeTK;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_odeTK_namespace::profiles__;
}
#endif
#endif
