// Generated by rstantools.  Do not edit by hand.

/*
    rbioacc is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rbioacc is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rbioacc.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_TK_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 246> locations_array__ =
  {" (found before start of program)",
  " (in 'TK', line 140, column 2 to column 25)",
  " (in 'TK', line 141, column 2 to column 25)",
  " (in 'TK', line 142, column 2 to column 25)",
  " (in 'TK', line 143, column 2 to column 26)",
  " (in 'TK', line 144, column 2 to column 42)",
  " (in 'TK', line 145, column 2 to column 40)",
  " (in 'TK', line 146, column 2 to column 39)",
  " (in 'TK', line 147, column 2 to column 35)",
  " (in 'TK', line 151, column 2 to column 29)",
  " (in 'TK', line 152, column 2 to column 29)",
  " (in 'TK', line 153, column 2 to column 29)",
  " (in 'TK', line 154, column 2 to column 30)",
  " (in 'TK', line 155, column 2 to column 19)",
  " (in 'TK', line 156, column 2 to column 10)",
  " (in 'TK', line 157, column 2 to column 10)",
  " (in 'TK', line 158, column 2 to column 19)",
  " (in 'TK', line 159, column 2 to column 19)",
  " (in 'TK', line 161, column 2 to column 30)",
  " (in 'TK', line 162, column 2 to column 32)",
  " (in 'TK', line 281, column 2 to column 36)",
  " (in 'TK', line 282, column 2 to column 35)",
  " (in 'TK', line 283, column 2 to column 42)",
  " (in 'TK', line 164, column 4 to column 29)",
  " (in 'TK', line 163, column 19 to line 165, column 3)",
  " (in 'TK', line 163, column 2 to line 165, column 3)",
  " (in 'TK', line 170, column 6 to column 31)",
  " (in 'TK', line 169, column 10 to line 171, column 5)",
  " (in 'TK', line 168, column 7 to column 18)",
  " (in 'TK', line 167, column 26 to line 169, column 5)",
  " (in 'TK', line 167, column 4 to line 171, column 5)",
  " (in 'TK', line 166, column 19 to line 172, column 3)",
  " (in 'TK', line 166, column 2 to line 172, column 3)",
  " (in 'TK', line 174, column 4 to column 29)",
  " (in 'TK', line 175, column 4 to column 31)",
  " (in 'TK', line 173, column 19 to line 176, column 3)",
  " (in 'TK', line 173, column 2 to line 176, column 3)",
  " (in 'TK', line 180, column 5 to column 18)",
  " (in 'TK', line 179, column 8 to line 181, column 3)",
  " (in 'TK', line 178, column 4 to column 11)",
  " (in 'TK', line 177, column 16 to line 179, column 3)",
  " (in 'TK', line 177, column 2 to line 181, column 3)",
  " (in 'TK', line 185, column 4 to column 17)",
  " (in 'TK', line 184, column 8 to line 186, column 3)",
  " (in 'TK', line 183, column 4 to column 19)",
  " (in 'TK', line 182, column 24 to line 184, column 3)",
  " (in 'TK', line 182, column 2 to line 186, column 3)",
  " (in 'TK', line 189, column 4 to column 33)",
  " (in 'TK', line 190, column 4 to column 27)",
  " (in 'TK', line 187, column 19 to line 191, column 3)",
  " (in 'TK', line 187, column 2 to line 191, column 3)",
  " (in 'TK', line 193, column 6 to column 31)",
  " (in 'TK', line 192, column 19 to line 194, column 3)",
  " (in 'TK', line 192, column 2 to line 194, column 3)",
  " (in 'TK', line 198, column 4 to column 63)",
  " (in 'TK', line 202, column 9 to line 204, column 12)",
  " (in 'TK', line 201, column 23 to line 205, column 7)",
  " (in 'TK', line 201, column 6 to line 205, column 7)",
  " (in 'TK', line 200, column 17 to line 206, column 5)",
  " (in 'TK', line 200, column 4 to line 206, column 5)",
  " (in 'TK', line 196, column 21 to line 207, column 3)",
  " (in 'TK', line 196, column 2 to line 207, column 3)",
  " (in 'TK', line 211, column 4 to column 82)",
  " (in 'TK', line 215, column 6 to line 219, column 11)",
  " (in 'TK', line 214, column 23 to line 220, column 7)",
  " (in 'TK', line 214, column 6 to line 220, column 7)",
  " (in 'TK', line 213, column 17 to line 221, column 5)",
  " (in 'TK', line 213, column 4 to line 221, column 5)",
  " (in 'TK', line 209, column 29 to line 222, column 3)",
  " (in 'TK', line 209, column 2 to line 222, column 3)",
  " (in 'TK', line 226, column 6 to column 72)",
  " (in 'TK', line 225, column 21 to line 227, column 5)",
  " (in 'TK', line 225, column 4 to line 227, column 5)",
  " (in 'TK', line 224, column 16 to line 228, column 3)",
  " (in 'TK', line 224, column 2 to line 228, column 3)",
  " (in 'TK', line 287, column 4 to column 62)",
  " (in 'TK', line 290, column 6 to column 67)",
  " (in 'TK', line 289, column 21 to line 291, column 5)",
  " (in 'TK', line 289, column 4 to line 291, column 5)",
  " (in 'TK', line 285, column 19 to line 292, column 3)",
  " (in 'TK', line 285, column 2 to line 292, column 3)",
  " (in 'TK', line 295, column 6 to column 64)",
  " (in 'TK', line 294, column 21 to line 296, column 5)",
  " (in 'TK', line 294, column 4 to line 296, column 5)",
  " (in 'TK', line 293, column 16 to line 297, column 3)",
  " (in 'TK', line 293, column 2 to line 297, column 3)",
  " (in 'TK', line 301, column 6 to column 69)",
  " (in 'TK', line 300, column 22 to line 302, column 5)",
  " (in 'TK', line 300, column 4 to line 302, column 5)",
  " (in 'TK', line 298, column 19 to line 303, column 3)",
  " (in 'TK', line 298, column 2 to line 303, column 3)",
  " (in 'TK', line 232, column 2 to column 43)",
  " (in 'TK', line 233, column 2 to column 43)",
  " (in 'TK', line 234, column 2 to column 43)",
  " (in 'TK', line 235, column 2 to column 44)",
  " (in 'TK', line 236, column 2 to column 55)",
  " (in 'TK', line 237, column 2 to column 54)",
  " (in 'TK', line 239, column 5 to column 58)",
  " (in 'TK', line 240, column 5 to column 59)",
  " (in 'TK', line 241, column 5 to column 49)",
  " (in 'TK', line 238, column 16 to line 242, column 3)",
  " (in 'TK', line 238, column 2 to line 242, column 3)",
  " (in 'TK', line 248, column 8 to column 78)",
  " (in 'TK', line 247, column 33 to line 249, column 7)",
  " (in 'TK', line 247, column 6 to line 249, column 7)",
  " (in 'TK', line 253, column 10 to column 83)",
  " (in 'TK', line 252, column 34 to line 254, column 9)",
  " (in 'TK', line 252, column 8 to line 254, column 9)",
  " (in 'TK', line 251, column 23 to line 255, column 7)",
  " (in 'TK', line 251, column 6 to line 255, column 7)",
  " (in 'TK', line 245, column 23 to line 256, column 5)",
  " (in 'TK', line 245, column 4 to line 256, column 5)",
  " (in 'TK', line 261, column 8 to column 78)",
  " (in 'TK', line 260, column 33 to line 262, column 7)",
  " (in 'TK', line 260, column 6 to line 262, column 7)",
  " (in 'TK', line 266, column 10 to column 82)",
  " (in 'TK', line 265, column 34 to line 267, column 9)",
  " (in 'TK', line 265, column 8 to line 267, column 9)",
  " (in 'TK', line 264, column 23 to line 268, column 7)",
  " (in 'TK', line 264, column 6 to line 268, column 7)",
  " (in 'TK', line 258, column 31 to line 269, column 5)",
  " (in 'TK', line 258, column 4 to line 269, column 5)",
  " (in 'TK', line 274, column 10 to column 79)",
  " (in 'TK', line 273, column 35 to line 275, column 9)",
  " (in 'TK', line 273, column 8 to line 275, column 9)",
  " (in 'TK', line 272, column 23 to line 276, column 7)",
  " (in 'TK', line 272, column 6 to line 276, column 7)",
  " (in 'TK', line 271, column 18 to line 277, column 5)",
  " (in 'TK', line 271, column 4 to line 277, column 5)",
  " (in 'TK', line 243, column 21 to line 278, column 3)",
  " (in 'TK', line 243, column 2 to line 278, column 3)",
  " (in 'TK', line 115, column 2 to column 22)",
  " (in 'TK', line 117, column 2 to column 21)",
  " (in 'TK', line 118, column 9 to column 14)",
  " (in 'TK', line 118, column 2 to column 20)",
  " (in 'TK', line 120, column 2 to column 22)",
  " (in 'TK', line 121, column 9 to column 14)",
  " (in 'TK', line 121, column 16 to column 21)",
  " (in 'TK', line 121, column 2 to column 29)",
  " (in 'TK', line 124, column 2 to column 22)",
  " (in 'TK', line 125, column 8 to column 13)",
  " (in 'TK', line 125, column 15 to column 20)",
  " (in 'TK', line 125, column 22 to column 27)",
  " (in 'TK', line 125, column 2 to column 40)",
  " (in 'TK', line 127, column 2 to column 22)",
  " (in 'TK', line 128, column 8 to column 13)",
  " (in 'TK', line 128, column 15 to column 20)",
  " (in 'TK', line 128, column 22 to column 27)",
  " (in 'TK', line 128, column 2 to column 40)",
  " (in 'TK', line 129, column 2 to column 25)",
  " (in 'TK', line 131, column 2 to column 24)",
  " (in 'TK', line 132, column 2 to column 22)",
  " (in 'TK', line 133, column 2 to column 20)",
  " (in 'TK', line 134, column 2 to column 18)",
  " (in 'TK', line 135, column 2 to column 16)",
  " (in 'TK', line 136, column 2 to column 22)",
  " (in 'TK', line 137, column 9 to column 15)",
  " (in 'TK', line 137, column 2 to column 21)",
  " (in 'TK', line 140, column 9 to column 14)",
  " (in 'TK', line 141, column 9 to column 14)",
  " (in 'TK', line 142, column 9 to column 14)",
  " (in 'TK', line 143, column 9 to column 14)",
  " (in 'TK', line 144, column 8 to column 13)",
  " (in 'TK', line 145, column 18 to column 23)",
  " (in 'TK', line 146, column 8 to column 17)",
  " (in 'TK', line 147, column 8 to column 16)",
  " (in 'TK', line 151, column 18 to column 23)",
  " (in 'TK', line 152, column 18 to column 23)",
  " (in 'TK', line 153, column 18 to column 23)",
  " (in 'TK', line 154, column 18 to column 23)",
  " (in 'TK', line 155, column 9 to column 14)",
  " (in 'TK', line 158, column 9 to column 14)",
  " (in 'TK', line 159, column 9 to column 14)",
  " (in 'TK', line 161, column 9 to column 14)",
  " (in 'TK', line 161, column 15 to column 20)",
  " (in 'TK', line 162, column 9 to column 14)",
  " (in 'TK', line 162, column 15 to column 20)",
  " (in 'TK', line 281, column 8 to column 13)",
  " (in 'TK', line 281, column 14 to column 19)",
  " (in 'TK', line 282, column 8 to column 13)",
  " (in 'TK', line 282, column 14 to column 19)",
  " (in 'TK', line 283, column 8 to column 14)",
  " (in 'TK', line 283, column 16 to column 21)",
  " (in 'TK', line 4, column 2 to column 13)",
  " (in 'TK', line 12, column 6 to column 15)",
  " (in 'TK', line 11, column 24 to line 13, column 5)",
  " (in 'TK', line 11, column 4 to line 13, column 5)",
  " (in 'TK', line 14, column 4 to column 14)",
  " (in 'TK', line 10, column 9 to line 15, column 3)",
  " (in 'TK', line 9, column 4 to column 14)",
  " (in 'TK', line 8, column 39 to line 10, column 3)",
  " (in 'TK', line 8, column 9 to line 15, column 3)",
  " (in 'TK', line 6, column 4 to column 30)",
  " (in 'TK', line 7, column 4 to column 14)",
  " (in 'TK', line 5, column 18 to line 8, column 3)",
  " (in 'TK', line 5, column 2 to line 15, column 3)",
  " (in 'TK', line 3, column 33 to line 16, column 1)",
  " (in 'TK', line 22, column 4 to column 16)",
  " (in 'TK', line 21, column 8 to line 23, column 3)",
  " (in 'TK', line 19, column 4 to column 33)",
  " (in 'TK', line 20, column 4 to column 90)",
  " (in 'TK', line 18, column 36 to line 21, column 3)",
  " (in 'TK', line 18, column 2 to line 23, column 3)",
  " (in 'TK', line 17, column 48 to line 24, column 1)",
  " (in 'TK', line 32, column 2 to column 27)",
  " (in 'TK', line 33, column 2 to column 22)",
  " (in 'TK', line 34, column 2 to column 22)",
  " (in 'TK', line 35, column 2 to column 22)",
  " (in 'TK', line 36, column 2 to column 22)",
  " (in 'TK', line 37, column 8 to column 13)",
  " (in 'TK', line 37, column 2 to column 41)",
  " (in 'TK', line 38, column 8 to column 13)",
  " (in 'TK', line 38, column 2 to column 57)",
  " (in 'TK', line 39, column 8 to column 13)",
  " (in 'TK', line 39, column 2 to column 69)",
  " (in 'TK', line 40, column 8 to column 13)",
  " (in 'TK', line 40, column 2 to column 82)",
  " (in 'TK', line 42, column 8 to column 15)",
  " (in 'TK', line 42, column 2 to column 28)",
  " (in 'TK', line 43, column 2 to column 22)",
  " (in 'TK', line 45, column 9 to column 19)",
  " (in 'TK', line 45, column 2 to column 65)",
  " (in 'TK', line 48, column 9 to column 19)",
  " (in 'TK', line 48, column 2 to column 91)",
  " (in 'TK', line 50, column 2 to column 10)",
  " (in 'TK', line 51, column 2 to column 10)",
  " (in 'TK', line 52, column 2 to column 10)",
  " (in 'TK', line 56, column 4 to column 17)",
  " (in 'TK', line 55, column 8 to line 57, column 3)",
  " (in 'TK', line 54, column 4 to column 11)",
  " (in 'TK', line 53, column 16 to line 55, column 3)",
  " (in 'TK', line 53, column 2 to line 57, column 3)",
  " (in 'TK', line 58, column 2 to column 15)",
  " (in 'TK', line 61, column 2 to column 50)",
  " (in 'TK', line 72, column 4 to column 32)",
  " (in 'TK', line 70, column 8 to line 73, column 3)",
  " (in 'TK', line 69, column 4 to column 34)",
  " (in 'TK', line 67, column 15 to line 70, column 3)",
  " (in 'TK', line 67, column 2 to line 73, column 3)",
  " (in 'TK', line 76, column 6 to column 46)",
  " (in 'TK', line 75, column 25 to line 77, column 5)",
  " (in 'TK', line 75, column 4 to line 77, column 5)",
  " (in 'TK', line 74, column 15 to line 78, column 3)",
  " (in 'TK', line 74, column 2 to line 78, column 3)",
  " (in 'TK', line 79, column 2 to column 16)",
  " (in 'TK', line 30, column 30 to line 80, column 1)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
int findfirst(const T0__& t, const T1__& xt_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>>
interpolate(const T0__& x, const T1__& xpt_arg__, const T2__& ypt_arg__,
            std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
odeTK(const T0__& t, const std::vector<T1__>& y, const std::vector<T2__>&
      theta, const std::vector<T3__>& x_r, const std::vector<int>& x_i,
      std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
int findfirst(const T0__& t, const T1__& xt_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& xt = stan::math::to_ref(xt_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int i = std::numeric_limits<int>::min();
    current_statement__ = 183;
    i = 0;
    current_statement__ = 195;
    if (stan::math::logical_eq(t, stan::math::max(xt))) {
      current_statement__ = 192;
      i = (stan::math::num_elements(xt) - 1);
      current_statement__ = 193;
      return i;
    } else {
      current_statement__ = 191;
      if ((stan::math::primitive_value(
             stan::math::logical_lt(t, stan::math::min(xt)))
          ||
          stan::math::primitive_value(
            stan::math::logical_gt(t, stan::math::max(xt))))) {
        current_statement__ = 189;
        return i;
      } else {
        current_statement__ = 186;
        while (stan::math::logical_gte(t,
                 stan::model::rvalue(xt, "xt",
                   stan::model::index_uni((i + 1))))) {
          current_statement__ = 184;
          i = (i + 1);
        }
        current_statement__ = 187;
        return i;
      }
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
stan::promote_args_t<T0__, stan::base_type_t<T1__>, stan::base_type_t<T2__>>
interpolate(const T0__& x, const T1__& xpt_arg__, const T2__& ypt_arg__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& xpt = stan::math::to_ref(xpt_arg__);
  const auto& ypt = stan::math::to_ref(ypt_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 202;
    if ((stan::math::primitive_value(
           stan::math::logical_gte(x, stan::math::min(xpt)))
        &&
        stan::math::primitive_value(
          stan::math::logical_lte(x, stan::math::max(xpt))))) {
      int idx = std::numeric_limits<int>::min();
      current_statement__ = 199;
      idx = findfirst(x, xpt, pstream__);
      current_statement__ = 200;
      return (stan::model::rvalue(ypt, "ypt", stan::model::index_uni(idx)) +
             (((x -
             stan::model::rvalue(xpt, "xpt", stan::model::index_uni(idx))) *
             (stan::model::rvalue(ypt, "ypt",
                stan::model::index_uni((idx + 1)))
             - stan::model::rvalue(ypt, "ypt", stan::model::index_uni(idx))))
             /
             (stan::model::rvalue(xpt, "xpt",
                stan::model::index_uni((idx + 1)))
             -
             stan::model::rvalue(xpt, "xpt", stan::model::index_uni(idx)))));
    } else {
      current_statement__ = 197;
      return 0.0;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
odeTK(const T0__& t, const std::vector<T1__>& y, const std::vector<T2__>&
      theta, const std::vector<T3__>& x_r, const std::vector<int>& x_i,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int lentp_rmNA = std::numeric_limits<int>::min();
    current_statement__ = 204;
    lentp_rmNA = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(1));
    int lentp = std::numeric_limits<int>::min();
    current_statement__ = 205;
    lentp = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(2));
    int n_exp = std::numeric_limits<int>::min();
    current_statement__ = 206;
    n_exp = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(3));
    int n_out = std::numeric_limits<int>::min();
    current_statement__ = 207;
    n_out = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(4));
    int n_met = std::numeric_limits<int>::min();
    current_statement__ = 208;
    n_met = stan::model::rvalue(x_i, "x_i", stan::model::index_uni(5));
    current_statement__ = 209;
    stan::math::validate_non_negative_index("ku", "n_exp", n_exp);
    std::vector<local_scalar_t__> ku =
      std::vector<local_scalar_t__>(n_exp, DUMMY_VAR__);
    current_statement__ = 210;
    stan::model::assign(ku,
      stan::model::rvalue(theta, "theta",
        stan::model::index_min_max(1, n_exp)), "assigning variable ku");
    current_statement__ = 211;
    stan::math::validate_non_negative_index("ke", "n_out", n_out);
    std::vector<local_scalar_t__> ke =
      std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
    current_statement__ = 212;
    stan::model::assign(ke,
      stan::model::rvalue(theta, "theta",
        stan::model::index_min_max((n_exp + 1), (n_exp + n_out))),
      "assigning variable ke");
    current_statement__ = 213;
    stan::math::validate_non_negative_index("km", "n_met", n_met);
    std::vector<local_scalar_t__> km =
      std::vector<local_scalar_t__>(n_met, DUMMY_VAR__);
    current_statement__ = 214;
    stan::model::assign(km,
      stan::model::rvalue(theta, "theta",
        stan::model::index_min_max(((n_exp + n_out) + 1), ((n_exp + n_out) +
          n_met))), "assigning variable km");
    current_statement__ = 215;
    stan::math::validate_non_negative_index("kem", "n_met", n_met);
    std::vector<local_scalar_t__> kem =
      std::vector<local_scalar_t__>(n_met, DUMMY_VAR__);
    current_statement__ = 216;
    stan::model::assign(kem,
      stan::model::rvalue(theta, "theta",
        stan::model::index_min_max((((n_exp + n_out) + n_met) + 1), (((n_exp
          + n_out) + n_met) + n_met))), "assigning variable kem");
    current_statement__ = 217;
    stan::math::validate_non_negative_index("dydt", "1 + n_met", (1 + n_met));
    std::vector<local_scalar_t__> dydt =
      std::vector<local_scalar_t__>((1 + n_met), DUMMY_VAR__);
    local_scalar_t__ tacc = DUMMY_VAR__;
    current_statement__ = 219;
    tacc = stan::model::rvalue(x_r, "x_r", stan::model::index_uni(1));
    current_statement__ = 220;
    stan::math::validate_non_negative_index("tp_rmNA", "lentp_rmNA",
      lentp_rmNA);
    Eigen::Matrix<local_scalar_t__,-1,1> tp_rmNA =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lentp_rmNA, DUMMY_VAR__);
    current_statement__ = 221;
    stan::model::assign(tp_rmNA,
      stan::math::to_vector(
        stan::model::rvalue(x_r, "x_r",
          stan::model::index_min_max(2, (lentp_rmNA + 1)))),
      "assigning variable tp_rmNA");
    current_statement__ = 222;
    stan::math::validate_non_negative_index("Cexp_rmNA", "lentp_rmNA",
      lentp_rmNA);
    Eigen::Matrix<local_scalar_t__,-1,1> Cexp_rmNA =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lentp_rmNA, DUMMY_VAR__);
    current_statement__ = 223;
    stan::model::assign(Cexp_rmNA,
      stan::math::to_vector(
        stan::model::rvalue(x_r, "x_r",
          stan::model::index_min_max((lentp_rmNA + 2), ((lentp_rmNA + 1) +
            lentp_rmNA)))), "assigning variable Cexp_rmNA");
    local_scalar_t__ U = DUMMY_VAR__;
    local_scalar_t__ M = DUMMY_VAR__;
    local_scalar_t__ E = DUMMY_VAR__;
    current_statement__ = 231;
    if (stan::math::logical_eq(n_met, 0)) {
      current_statement__ = 229;
      M = 0;
    } else {
      current_statement__ = 227;
      M = stan::math::sum(km);
    }
    current_statement__ = 232;
    E = stan::math::sum(ke);
    current_statement__ = 233;
    U = (stan::model::rvalue(ku, "ku", stan::model::index_uni(1)) *
      interpolate(t, tp_rmNA, Cexp_rmNA, pstream__));
    current_statement__ = 238;
    if (stan::math::logical_lte(t, tacc)) {
      current_statement__ = 236;
      stan::model::assign(dydt, (U - ((E + M) *
        stan::model::rvalue(y, "y", stan::model::index_uni(1)))),
        "assigning variable dydt", stan::model::index_uni(1));
    } else {
      current_statement__ = 234;
      stan::model::assign(dydt, (-(E + M) *
        stan::model::rvalue(y, "y", stan::model::index_uni(1))),
        "assigning variable dydt", stan::model::index_uni(1));
    }
    current_statement__ = 243;
    if (stan::math::logical_gt(n_met, 0)) {
      current_statement__ = 241;
      for (int i = 2; i <= (n_met + 1); ++i) {
        current_statement__ = 239;
        stan::model::assign(dydt,
          ((stan::model::rvalue(km, "km", stan::model::index_uni(i)) *
          stan::model::rvalue(y, "y", stan::model::index_uni(1))) -
          (stan::model::rvalue(kem, "kem", stan::model::index_uni(i)) *
          stan::model::rvalue(y, "y", stan::model::index_uni(i)))),
          "assigning variable dydt", stan::model::index_uni(i));
      }
    }
    current_statement__ = 244;
    return dydt;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
#include <stan_meta_header.hpp>
class model_TK final : public model_base_crtp<model_TK> {
private:
  int n_rep;
  int lentp;
  Eigen::Matrix<double,-1,1> tp_data__;
  int n_exp;
  Eigen::Matrix<double,-1,-1> Cexp_data__;
  int n_out;
  std::vector<std::vector<std::vector<double>>> CGobs;
  int n_met;
  std::vector<std::vector<std::vector<double>>> Cmet;
  double gmaxsup;
  int rankacc;
  double tacc;
  double C0;
  double elim_rate;
  double unifMax;
  int len_vt;
  Eigen::Matrix<double,-1,1> vt_data__;
  int gmax_1dim__;
  int G0_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> tp{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Cexp{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> vt{nullptr, 0};
public:
  ~model_TK() {}
  model_TK(stan::io::var_context& context__, unsigned int random_seed__ = 0,
           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ = "model_TK_namespace::model_TK";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 131;
      context__.validate_dims("data initialization", "n_rep", "int",
        std::vector<size_t>{});
      n_rep = std::numeric_limits<int>::min();
      current_statement__ = 131;
      n_rep = context__.vals_i("n_rep")[(1 - 1)];
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "n_rep", n_rep, 0);
      current_statement__ = 132;
      context__.validate_dims("data initialization", "lentp", "int",
        std::vector<size_t>{});
      lentp = std::numeric_limits<int>::min();
      current_statement__ = 132;
      lentp = context__.vals_i("lentp")[(1 - 1)];
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "lentp", lentp, 0);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("tp", "lentp", lentp);
      current_statement__ = 134;
      context__.validate_dims("data initialization", "tp", "double",
        std::vector<size_t>{static_cast<size_t>(lentp)});
      tp_data__ = Eigen::Matrix<double,-1,1>::Constant(lentp,
                    std::numeric_limits<double>::quiet_NaN());
      new (&tp) Eigen::Map<Eigen::Matrix<double,-1,1>>(tp_data__.data(),
        lentp);
      {
        std::vector<local_scalar_t__> tp_flat__;
        current_statement__ = 134;
        tp_flat__ = context__.vals_r("tp");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= lentp; ++sym1__) {
          current_statement__ = 134;
          stan::model::assign(tp, tp_flat__[(pos__ - 1)],
            "assigning variable tp", stan::model::index_uni(sym1__));
          current_statement__ = 134;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 135;
      context__.validate_dims("data initialization", "n_exp", "int",
        std::vector<size_t>{});
      n_exp = std::numeric_limits<int>::min();
      current_statement__ = 135;
      n_exp = context__.vals_i("n_exp")[(1 - 1)];
      current_statement__ = 135;
      stan::math::check_greater_or_equal(function__, "n_exp", n_exp, 0);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("Cexp", "lentp", lentp);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("Cexp", "n_exp", n_exp);
      current_statement__ = 138;
      context__.validate_dims("data initialization", "Cexp", "double",
        std::vector<size_t>{static_cast<size_t>(lentp),
          static_cast<size_t>(n_exp)});
      Cexp_data__ = Eigen::Matrix<double,-1,-1>::Constant(lentp, n_exp,
                      std::numeric_limits<double>::quiet_NaN());
      new (&Cexp) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Cexp_data__.data(),
        lentp, n_exp);
      {
        std::vector<local_scalar_t__> Cexp_flat__;
        current_statement__ = 138;
        Cexp_flat__ = context__.vals_r("Cexp");
        current_statement__ = 138;
        pos__ = 1;
        current_statement__ = 138;
        for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
          current_statement__ = 138;
          for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
            current_statement__ = 138;
            stan::model::assign(Cexp, Cexp_flat__[(pos__ - 1)],
              "assigning variable Cexp", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 138;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 139;
      context__.validate_dims("data initialization", "n_out", "int",
        std::vector<size_t>{});
      n_out = std::numeric_limits<int>::min();
      current_statement__ = 139;
      n_out = context__.vals_i("n_out")[(1 - 1)];
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "n_out", n_out, 0);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("CGobs", "lentp", lentp);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("CGobs", "n_out", n_out);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("CGobs", "n_rep", n_rep);
      current_statement__ = 143;
      context__.validate_dims("data initialization", "CGobs", "double",
        std::vector<size_t>{static_cast<size_t>(lentp),
          static_cast<size_t>(n_out), static_cast<size_t>(n_rep)});
      CGobs = std::vector<std::vector<std::vector<double>>>(lentp,
                std::vector<std::vector<double>>(n_out,
                  std::vector<double>(n_rep,
                    std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> CGobs_flat__;
        current_statement__ = 143;
        CGobs_flat__ = context__.vals_r("CGobs");
        current_statement__ = 143;
        pos__ = 1;
        current_statement__ = 143;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 143;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 143;
            for (int sym3__ = 1; sym3__ <= lentp; ++sym3__) {
              current_statement__ = 143;
              stan::model::assign(CGobs, CGobs_flat__[(pos__ - 1)],
                "assigning variable CGobs", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 143;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 144;
      context__.validate_dims("data initialization", "n_met", "int",
        std::vector<size_t>{});
      n_met = std::numeric_limits<int>::min();
      current_statement__ = 144;
      n_met = context__.vals_i("n_met")[(1 - 1)];
      current_statement__ = 144;
      stan::math::check_greater_or_equal(function__, "n_met", n_met, 0);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("Cmet", "lentp", lentp);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("Cmet", "n_met", n_met);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("Cmet", "n_rep", n_rep);
      current_statement__ = 148;
      context__.validate_dims("data initialization", "Cmet", "double",
        std::vector<size_t>{static_cast<size_t>(lentp),
          static_cast<size_t>(n_met), static_cast<size_t>(n_rep)});
      Cmet = std::vector<std::vector<std::vector<double>>>(lentp,
               std::vector<std::vector<double>>(n_met,
                 std::vector<double>(n_rep,
                   std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> Cmet_flat__;
        current_statement__ = 148;
        Cmet_flat__ = context__.vals_r("Cmet");
        current_statement__ = 148;
        pos__ = 1;
        current_statement__ = 148;
        for (int sym1__ = 1; sym1__ <= n_rep; ++sym1__) {
          current_statement__ = 148;
          for (int sym2__ = 1; sym2__ <= n_met; ++sym2__) {
            current_statement__ = 148;
            for (int sym3__ = 1; sym3__ <= lentp; ++sym3__) {
              current_statement__ = 148;
              stan::model::assign(Cmet, Cmet_flat__[(pos__ - 1)],
                "assigning variable Cmet", stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 148;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 149;
      context__.validate_dims("data initialization", "gmaxsup", "double",
        std::vector<size_t>{});
      gmaxsup = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 149;
      gmaxsup = context__.vals_r("gmaxsup")[(1 - 1)];
      current_statement__ = 149;
      stan::math::check_greater_or_equal(function__, "gmaxsup", gmaxsup, 0);
      current_statement__ = 150;
      context__.validate_dims("data initialization", "rankacc", "int",
        std::vector<size_t>{});
      rankacc = std::numeric_limits<int>::min();
      current_statement__ = 150;
      rankacc = context__.vals_i("rankacc")[(1 - 1)];
      current_statement__ = 150;
      stan::math::check_greater_or_equal(function__, "rankacc", rankacc, 0);
      current_statement__ = 151;
      context__.validate_dims("data initialization", "tacc", "double",
        std::vector<size_t>{});
      tacc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 151;
      tacc = context__.vals_r("tacc")[(1 - 1)];
      current_statement__ = 151;
      stan::math::check_greater_or_equal(function__, "tacc", tacc, 0);
      current_statement__ = 152;
      context__.validate_dims("data initialization", "C0", "double",
        std::vector<size_t>{});
      C0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 152;
      C0 = context__.vals_r("C0")[(1 - 1)];
      current_statement__ = 152;
      stan::math::check_greater_or_equal(function__, "C0", C0, 0);
      current_statement__ = 153;
      context__.validate_dims("data initialization", "elim_rate", "double",
        std::vector<size_t>{});
      elim_rate = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 153;
      elim_rate = context__.vals_r("elim_rate")[(1 - 1)];
      current_statement__ = 154;
      context__.validate_dims("data initialization", "unifMax", "double",
        std::vector<size_t>{});
      unifMax = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 154;
      unifMax = context__.vals_r("unifMax")[(1 - 1)];
      current_statement__ = 155;
      context__.validate_dims("data initialization", "len_vt", "int",
        std::vector<size_t>{});
      len_vt = std::numeric_limits<int>::min();
      current_statement__ = 155;
      len_vt = context__.vals_i("len_vt")[(1 - 1)];
      current_statement__ = 155;
      stan::math::check_greater_or_equal(function__, "len_vt", len_vt, 0);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("vt", "len_vt", len_vt);
      current_statement__ = 157;
      context__.validate_dims("data initialization", "vt", "double",
        std::vector<size_t>{static_cast<size_t>(len_vt)});
      vt_data__ = Eigen::Matrix<double,-1,1>::Constant(len_vt,
                    std::numeric_limits<double>::quiet_NaN());
      new (&vt) Eigen::Map<Eigen::Matrix<double,-1,1>>(vt_data__.data(),
        len_vt);
      {
        std::vector<local_scalar_t__> vt_flat__;
        current_statement__ = 157;
        vt_flat__ = context__.vals_r("vt");
        current_statement__ = 157;
        pos__ = 1;
        current_statement__ = 157;
        for (int sym1__ = 1; sym1__ <= len_vt; ++sym1__) {
          current_statement__ = 157;
          stan::model::assign(vt, vt_flat__[(pos__ - 1)],
            "assigning variable vt", stan::model::index_uni(sym1__));
          current_statement__ = 157;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 158;
      stan::math::validate_non_negative_index("log10ku", "n_exp", n_exp);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("log10ke", "n_out", n_out);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("log10km", "n_met", n_met);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("log10kem", "n_met", n_met);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("sigmaCGpred", "n_out", n_out);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("sigmaCmetpred", "n_met", n_met);
      current_statement__ = 164;
      gmax_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 164;
      gmax_1dim__ = (n_out - 1);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("gmax", "n_out - 1",
        gmax_1dim__);
      current_statement__ = 165;
      G0_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 165;
      G0_1dim__ = (n_out - 1);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("G0", "n_out - 1", G0_1dim__);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("ku", "n_exp", n_exp);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("ke", "n_out", n_out);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("km", "n_met", n_met);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("kem", "n_met", n_met);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("U", "lentp", lentp);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("R", "lentp", lentp);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("D", "n_met", n_met);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("CGpred", "lentp", lentp);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("CGpred", "n_out", n_out);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("Cmetpred", "lentp", lentp);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("Cmetpred", "n_met", n_met);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("CGobs_out", "lentp", lentp);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("CGobs_out", "n_out", n_out);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("Cmet_out", "lentp", lentp);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("Cmet_out", "n_met", n_met);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("Cexp_interpol", "len_vt",
        len_vt);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("Cexp_interpol", "n_exp", n_exp);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_exp + n_out + n_met + n_met + n_out + n_met +
      gmax_1dim__ + G0_1dim__;
  }
  inline std::string model_name() const final {
    return "model_TK";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "model_TK_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> log10ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_exp, DUMMY_VAR__);
      current_statement__ = 1;
      log10ku = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_exp);
      Eigen::Matrix<local_scalar_t__,-1,1> log10ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_out, DUMMY_VAR__);
      current_statement__ = 2;
      log10ke = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_out);
      Eigen::Matrix<local_scalar_t__,-1,1> log10km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 3;
      log10km = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_met);
      Eigen::Matrix<local_scalar_t__,-1,1> log10kem =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 4;
      log10kem = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(n_met);
      std::vector<local_scalar_t__> sigmaCGpred =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 5;
      sigmaCGpred = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                      n_out);
      Eigen::Matrix<local_scalar_t__,-1,1> sigmaCmetpred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 6;
      sigmaCmetpred = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                        lp__, n_met);
      std::vector<local_scalar_t__> gmax =
        std::vector<local_scalar_t__>(gmax_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      gmax = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, gmax_1dim__);
      std::vector<local_scalar_t__> G0 =
        std::vector<local_scalar_t__>(G0_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      G0 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, G0_1dim__);
      Eigen::Matrix<local_scalar_t__,-1,1> ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_exp, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_out, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> kem =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> U =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lentp, DUMMY_VAR__);
      local_scalar_t__ M = DUMMY_VAR__;
      local_scalar_t__ E = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> R =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(lentp, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> D =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> CGpred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lentp, n_out,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> Cmetpred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(lentp, n_met,
          DUMMY_VAR__);
      current_statement__ = 25;
      for (int i = 1; i <= n_exp; ++i) {
        current_statement__ = 23;
        stan::model::assign(ku,
          stan::math::pow(10,
            stan::model::rvalue(log10ku, "log10ku", stan::model::index_uni(i))),
          "assigning variable ku", stan::model::index_uni(i));
      }
      current_statement__ = 32;
      for (int i = 1; i <= n_out; ++i) {
        current_statement__ = 30;
        if (stan::math::logical_negation(stan::math::is_inf(elim_rate))) {
          current_statement__ = 28;
          stan::model::assign(ke, 0, "assigning variable ke",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 26;
          stan::model::assign(ke,
            stan::math::pow(10,
              stan::model::rvalue(log10ke, "log10ke",
                stan::model::index_uni(i))), "assigning variable ke",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 36;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 33;
        stan::model::assign(km,
          stan::math::pow(10,
            stan::model::rvalue(log10km, "log10km", stan::model::index_uni(i))),
          "assigning variable km", stan::model::index_uni(i));
        current_statement__ = 34;
        stan::model::assign(kem,
          stan::math::pow(10,
            stan::model::rvalue(log10kem, "log10kem",
              stan::model::index_uni(i))), "assigning variable kem",
          stan::model::index_uni(i));
      }
      current_statement__ = 41;
      if (stan::math::logical_eq(n_met, 0)) {
        current_statement__ = 39;
        M = 0;
      } else {
        current_statement__ = 37;
        M = stan::math::sum(km);
      }
      current_statement__ = 46;
      if (stan::math::logical_negation(stan::math::is_inf(elim_rate))) {
        current_statement__ = 44;
        E = elim_rate;
      } else {
        current_statement__ = 42;
        E = stan::math::sum(ke);
      }
      current_statement__ = 50;
      for (int t = 1; t <= lentp; ++t) {
        current_statement__ = 47;
        stan::model::assign(U,
          stan::math::multiply(
            stan::model::rvalue(Cexp, "Cexp", stan::model::index_uni(t),
              stan::model::index_min_max(1, n_exp)), ku),
          "assigning variable U", stan::model::index_uni(t));
        current_statement__ = 48;
        stan::model::assign(R,
          (stan::model::rvalue(U, "U", stan::model::index_uni(t)) / (E + M)),
          "assigning variable R", stan::model::index_uni(t));
      }
      current_statement__ = 53;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 51;
        stan::model::assign(D,
          (stan::model::rvalue(kem, "kem", stan::model::index_uni(i)) - (E +
          M)), "assigning variable D", stan::model::index_uni(i));
      }
      current_statement__ = 61;
      for (int t = 1; t <= rankacc; ++t) {
        current_statement__ = 54;
        stan::model::assign(CGpred, (((C0 -
          stan::model::rvalue(R, "R", stan::model::index_uni(t))) *
          stan::math::exp((-(E + M) *
            stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))) +
          stan::model::rvalue(R, "R", stan::model::index_uni(t))),
          "assigning variable CGpred", stan::model::index_uni(t),
          stan::model::index_uni(1));
        current_statement__ = 59;
        if (stan::math::logical_gt(n_met, 0)) {
          current_statement__ = 57;
          for (int i = 1; i <= n_met; ++i) {
            current_statement__ = 55;
            stan::model::assign(Cmetpred,
              (stan::model::rvalue(km, "km", stan::model::index_uni(i)) *
              ((((C0 -
              stan::model::rvalue(R, "R", stan::model::index_uni(t))) /
              stan::model::rvalue(D, "D", stan::model::index_uni(i))) *
              (stan::math::exp((-(E + M) *
                 stan::model::rvalue(tp, "tp", stan::model::index_uni(t)))) -
              stan::math::exp(
                (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))))
              + ((stan::model::rvalue(R, "R", stan::model::index_uni(t)) /
              stan::model::rvalue(kem, "kem", stan::model::index_uni(i))) *
              (1 -
              stan::math::exp(
                -(stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * stan::model::rvalue(tp, "tp", stan::model::index_uni(t)))))))),
              "assigning variable Cmetpred", stan::model::index_uni(t),
              stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 69;
      for (int t = (rankacc + 1); t <= lentp; ++t) {
        current_statement__ = 62;
        stan::model::assign(CGpred, ((C0 -
          (stan::model::rvalue(R, "R", stan::model::index_uni(t)) * (1 -
          stan::math::exp(((E + M) * tacc))))) *
          stan::math::exp((-(E + M) *
            stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))),
          "assigning variable CGpred", stan::model::index_uni(t),
          stan::model::index_uni(1));
        current_statement__ = 67;
        if (stan::math::logical_gt(n_met, 0)) {
          current_statement__ = 65;
          for (int i = 1; i <= n_met; ++i) {
            current_statement__ = 63;
            stan::model::assign(Cmetpred,
              (stan::model::rvalue(km, "km", stan::model::index_uni(i)) *
              (((((C0 -
              stan::model::rvalue(R, "R", stan::model::index_uni(t))) /
              stan::model::rvalue(D, "D", stan::model::index_uni(i))) *
              (stan::math::exp((-(E + M) *
                 stan::model::rvalue(tp, "tp", stan::model::index_uni(t)))) -
              stan::math::exp(
                (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))))
              + ((stan::model::rvalue(R, "R", stan::model::index_uni(t)) /
              stan::model::rvalue(kem, "kem", stan::model::index_uni(i))) *
              (stan::math::exp(
                 (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                 * (stan::model::rvalue(tp, "tp", stan::model::index_uni(t))
                 - tacc))) -
              stan::math::exp(
                (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * stan::model::rvalue(tp, "tp", stan::model::index_uni(t)))))))
              + ((stan::model::rvalue(R, "R", stan::model::index_uni(t)) /
              stan::model::rvalue(D, "D", stan::model::index_uni(i))) *
              (stan::math::exp((-(E + M) *
                 (stan::model::rvalue(tp, "tp", stan::model::index_uni(t)) -
                 tacc))) -
              stan::math::exp(
                (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * (stan::model::rvalue(tp, "tp", stan::model::index_uni(t)) -
                tacc))))))), "assigning variable Cmetpred",
              stan::model::index_uni(t), stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 74;
      if (stan::math::logical_eq(n_out, 2)) {
        current_statement__ = 72;
        for (int t = 1; t <= lentp; ++t) {
          current_statement__ = 70;
          stan::model::assign(CGpred,
            (((stan::model::rvalue(G0, "G0", stan::model::index_uni(1)) -
            stan::model::rvalue(gmax, "gmax", stan::model::index_uni(1))) *
            stan::math::exp(
              (-stan::model::rvalue(ke, "ke", stan::model::index_uni(2)) *
              stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))) +
            stan::model::rvalue(gmax, "gmax", stan::model::index_uni(1))),
            "assigning variable CGpred", stan::model::index_uni(t),
            stan::model::index_uni(2));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "ku", ku, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "ke", ke, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "km", km, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "kem", kem, 0);
      {
        current_statement__ = 91;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10ku, -5, 5));
        current_statement__ = 92;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10ke, -5, 5));
        current_statement__ = 93;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10km, -5, 5));
        current_statement__ = 94;
        lp_accum__.add(stan::math::uniform_lpdf<false>(log10kem, -5, 5));
        current_statement__ = 95;
        lp_accum__.add(stan::math::uniform_lpdf<false>(
                         stan::model::rvalue(sigmaCGpred, "sigmaCGpred",
                           stan::model::index_uni(1)), 0, unifMax));
        current_statement__ = 96;
        lp_accum__.add(stan::math::uniform_lpdf<false>(sigmaCmetpred, 0,
                         unifMax));
        current_statement__ = 101;
        if (stan::math::logical_eq(n_out, 2)) {
          current_statement__ = 97;
          lp_accum__.add(stan::math::uniform_lpdf<false>(
                           stan::model::rvalue(sigmaCGpred, "sigmaCGpred",
                             stan::model::index_uni(2)), 0, unifMax));
          current_statement__ = 98;
          lp_accum__.add(stan::math::uniform_lpdf<false>(
                           stan::model::rvalue(gmax, "gmax",
                             stan::model::index_uni(1)), (gmaxsup / 6),
                           gmaxsup));
          current_statement__ = 99;
          lp_accum__.add(stan::math::uniform_lpdf<false>(
                           stan::model::rvalue(G0, "G0",
                             stan::model::index_uni(1)), 0, gmaxsup));
        }
        current_statement__ = 130;
        for (int rep = 1; rep <= n_rep; ++rep) {
          current_statement__ = 111;
          for (int t = 1; t <= rankacc; ++t) {
            current_statement__ = 104;
            if (stan::math::logical_negation(
                  stan::math::is_inf(
                    stan::model::rvalue(CGobs, "CGobs",
                      stan::model::index_uni(t), stan::model::index_uni(1),
                      stan::model::index_uni(rep))))) {
              current_statement__ = 102;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(CGobs, "CGobs",
                                 stan::model::index_uni(t),
                                 stan::model::index_uni(1),
                                 stan::model::index_uni(rep)),
                               stan::model::rvalue(CGpred, "CGpred",
                                 stan::model::index_uni(t),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(sigmaCGpred,
                                 "sigmaCGpred", stan::model::index_uni(1))));
            }
            current_statement__ = 109;
            for (int i = 1; i <= n_met; ++i) {
              current_statement__ = 107;
              if (stan::math::logical_negation(
                    stan::math::is_inf(
                      stan::model::rvalue(Cmet, "Cmet",
                        stan::model::index_uni(t), stan::model::index_uni(i),
                        stan::model::index_uni(rep))))) {
                current_statement__ = 105;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(Cmet, "Cmet",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(rep)),
                                 stan::model::rvalue(Cmetpred, "Cmetpred",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(sigmaCmetpred,
                                   "sigmaCmetpred", stan::model::index_uni(i))));
              }
            }
          }
          current_statement__ = 121;
          for (int t = (rankacc + 1); t <= lentp; ++t) {
            current_statement__ = 114;
            if (stan::math::logical_negation(
                  stan::math::is_inf(
                    stan::model::rvalue(CGobs, "CGobs",
                      stan::model::index_uni(t), stan::model::index_uni(1),
                      stan::model::index_uni(rep))))) {
              current_statement__ = 112;
              lp_accum__.add(stan::math::normal_lpdf<false>(
                               stan::model::rvalue(CGobs, "CGobs",
                                 stan::model::index_uni(t),
                                 stan::model::index_uni(1),
                                 stan::model::index_uni(rep)),
                               stan::model::rvalue(CGpred, "CGpred",
                                 stan::model::index_uni(t),
                                 stan::model::index_uni(1)),
                               stan::model::rvalue(sigmaCGpred,
                                 "sigmaCGpred", stan::model::index_uni(1))));
            }
            current_statement__ = 119;
            for (int i = 1; i <= n_met; ++i) {
              current_statement__ = 117;
              if (stan::math::logical_negation(
                    stan::math::is_inf(
                      stan::model::rvalue(Cmet, "Cmet",
                        stan::model::index_uni(t), stan::model::index_uni(i),
                        stan::model::index_uni(rep))))) {
                current_statement__ = 115;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(Cmet, "Cmet",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(i),
                                   stan::model::index_uni(rep)),
                                 stan::model::rvalue(Cmetpred, "Cmetpred",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(i)),
                                 stan::model::rvalue(sigmaCmetpred,
                                   "sigmaCmetpred", stan::model::index_uni(i))));
              }
            }
          }
          current_statement__ = 128;
          if (stan::math::logical_eq(n_out, 2)) {
            current_statement__ = 126;
            for (int t = 1; t <= lentp; ++t) {
              current_statement__ = 124;
              if (stan::math::logical_negation(
                    stan::math::is_inf(
                      stan::model::rvalue(CGobs, "CGobs",
                        stan::model::index_uni(t), stan::model::index_uni(2),
                        stan::model::index_uni(rep))))) {
                current_statement__ = 122;
                lp_accum__.add(stan::math::normal_lpdf<false>(
                                 stan::model::rvalue(CGobs, "CGobs",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(2),
                                   stan::model::index_uni(rep)),
                                 stan::model::rvalue(CGpred, "CGpred",
                                   stan::model::index_uni(t),
                                   stan::model::index_uni(2)),
                                 stan::model::rvalue(sigmaCGpred,
                                   "sigmaCGpred", stan::model::index_uni(2))));
              }
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_TK_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> log10ku =
        Eigen::Matrix<double,-1,1>::Constant(n_exp,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      log10ku = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_exp);
      Eigen::Matrix<double,-1,1> log10ke =
        Eigen::Matrix<double,-1,1>::Constant(n_out,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      log10ke = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_out);
      Eigen::Matrix<double,-1,1> log10km =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      log10km = in__.template read<
                  Eigen::Matrix<local_scalar_t__,-1,1>>(n_met);
      Eigen::Matrix<double,-1,1> log10kem =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      log10kem = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(n_met);
      std::vector<double> sigmaCGpred =
        std::vector<double>(n_out, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      sigmaCGpred = in__.template read_constrain_lb<
                      std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                      n_out);
      Eigen::Matrix<double,-1,1> sigmaCmetpred =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      sigmaCmetpred = in__.template read_constrain_lb<
                        Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                        lp__, n_met);
      std::vector<double> gmax =
        std::vector<double>(gmax_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      gmax = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
               jacobian__>(0, lp__, gmax_1dim__);
      std::vector<double> G0 =
        std::vector<double>(G0_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      G0 = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
             jacobian__>(0, lp__, G0_1dim__);
      Eigen::Matrix<double,-1,1> ku =
        Eigen::Matrix<double,-1,1>::Constant(n_exp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ke =
        Eigen::Matrix<double,-1,1>::Constant(n_out,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> km =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> kem =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> U =
        Eigen::Matrix<double,-1,1>::Constant(lentp,
          std::numeric_limits<double>::quiet_NaN());
      double M = std::numeric_limits<double>::quiet_NaN();
      double E = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> R =
        Eigen::Matrix<double,-1,1>::Constant(lentp,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> D =
        Eigen::Matrix<double,-1,1>::Constant(n_met,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> CGpred =
        Eigen::Matrix<double,-1,-1>::Constant(lentp, n_out,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> Cmetpred =
        Eigen::Matrix<double,-1,-1>::Constant(lentp, n_met,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(log10ku);
      out__.write(log10ke);
      out__.write(log10km);
      out__.write(log10kem);
      out__.write(sigmaCGpred);
      out__.write(sigmaCmetpred);
      out__.write(gmax);
      out__.write(G0);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 25;
      for (int i = 1; i <= n_exp; ++i) {
        current_statement__ = 23;
        stan::model::assign(ku,
          stan::math::pow(10,
            stan::model::rvalue(log10ku, "log10ku", stan::model::index_uni(i))),
          "assigning variable ku", stan::model::index_uni(i));
      }
      current_statement__ = 32;
      for (int i = 1; i <= n_out; ++i) {
        current_statement__ = 30;
        if (stan::math::logical_negation(stan::math::is_inf(elim_rate))) {
          current_statement__ = 28;
          stan::model::assign(ke, 0, "assigning variable ke",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 26;
          stan::model::assign(ke,
            stan::math::pow(10,
              stan::model::rvalue(log10ke, "log10ke",
                stan::model::index_uni(i))), "assigning variable ke",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 36;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 33;
        stan::model::assign(km,
          stan::math::pow(10,
            stan::model::rvalue(log10km, "log10km", stan::model::index_uni(i))),
          "assigning variable km", stan::model::index_uni(i));
        current_statement__ = 34;
        stan::model::assign(kem,
          stan::math::pow(10,
            stan::model::rvalue(log10kem, "log10kem",
              stan::model::index_uni(i))), "assigning variable kem",
          stan::model::index_uni(i));
      }
      current_statement__ = 41;
      if (stan::math::logical_eq(n_met, 0)) {
        current_statement__ = 39;
        M = 0;
      } else {
        current_statement__ = 37;
        M = stan::math::sum(km);
      }
      current_statement__ = 46;
      if (stan::math::logical_negation(stan::math::is_inf(elim_rate))) {
        current_statement__ = 44;
        E = elim_rate;
      } else {
        current_statement__ = 42;
        E = stan::math::sum(ke);
      }
      current_statement__ = 50;
      for (int t = 1; t <= lentp; ++t) {
        current_statement__ = 47;
        stan::model::assign(U,
          stan::math::multiply(
            stan::model::rvalue(Cexp, "Cexp", stan::model::index_uni(t),
              stan::model::index_min_max(1, n_exp)), ku),
          "assigning variable U", stan::model::index_uni(t));
        current_statement__ = 48;
        stan::model::assign(R,
          (stan::model::rvalue(U, "U", stan::model::index_uni(t)) / (E + M)),
          "assigning variable R", stan::model::index_uni(t));
      }
      current_statement__ = 53;
      for (int i = 1; i <= n_met; ++i) {
        current_statement__ = 51;
        stan::model::assign(D,
          (stan::model::rvalue(kem, "kem", stan::model::index_uni(i)) - (E +
          M)), "assigning variable D", stan::model::index_uni(i));
      }
      current_statement__ = 61;
      for (int t = 1; t <= rankacc; ++t) {
        current_statement__ = 54;
        stan::model::assign(CGpred, (((C0 -
          stan::model::rvalue(R, "R", stan::model::index_uni(t))) *
          stan::math::exp((-(E + M) *
            stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))) +
          stan::model::rvalue(R, "R", stan::model::index_uni(t))),
          "assigning variable CGpred", stan::model::index_uni(t),
          stan::model::index_uni(1));
        current_statement__ = 59;
        if (stan::math::logical_gt(n_met, 0)) {
          current_statement__ = 57;
          for (int i = 1; i <= n_met; ++i) {
            current_statement__ = 55;
            stan::model::assign(Cmetpred,
              (stan::model::rvalue(km, "km", stan::model::index_uni(i)) *
              ((((C0 -
              stan::model::rvalue(R, "R", stan::model::index_uni(t))) /
              stan::model::rvalue(D, "D", stan::model::index_uni(i))) *
              (stan::math::exp((-(E + M) *
                 stan::model::rvalue(tp, "tp", stan::model::index_uni(t)))) -
              stan::math::exp(
                (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))))
              + ((stan::model::rvalue(R, "R", stan::model::index_uni(t)) /
              stan::model::rvalue(kem, "kem", stan::model::index_uni(i))) *
              (1 -
              stan::math::exp(
                -(stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * stan::model::rvalue(tp, "tp", stan::model::index_uni(t)))))))),
              "assigning variable Cmetpred", stan::model::index_uni(t),
              stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 69;
      for (int t = (rankacc + 1); t <= lentp; ++t) {
        current_statement__ = 62;
        stan::model::assign(CGpred, ((C0 -
          (stan::model::rvalue(R, "R", stan::model::index_uni(t)) * (1 -
          stan::math::exp(((E + M) * tacc))))) *
          stan::math::exp((-(E + M) *
            stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))),
          "assigning variable CGpred", stan::model::index_uni(t),
          stan::model::index_uni(1));
        current_statement__ = 67;
        if (stan::math::logical_gt(n_met, 0)) {
          current_statement__ = 65;
          for (int i = 1; i <= n_met; ++i) {
            current_statement__ = 63;
            stan::model::assign(Cmetpred,
              (stan::model::rvalue(km, "km", stan::model::index_uni(i)) *
              (((((C0 -
              stan::model::rvalue(R, "R", stan::model::index_uni(t))) /
              stan::model::rvalue(D, "D", stan::model::index_uni(i))) *
              (stan::math::exp((-(E + M) *
                 stan::model::rvalue(tp, "tp", stan::model::index_uni(t)))) -
              stan::math::exp(
                (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))))
              + ((stan::model::rvalue(R, "R", stan::model::index_uni(t)) /
              stan::model::rvalue(kem, "kem", stan::model::index_uni(i))) *
              (stan::math::exp(
                 (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                 * (stan::model::rvalue(tp, "tp", stan::model::index_uni(t))
                 - tacc))) -
              stan::math::exp(
                (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * stan::model::rvalue(tp, "tp", stan::model::index_uni(t)))))))
              + ((stan::model::rvalue(R, "R", stan::model::index_uni(t)) /
              stan::model::rvalue(D, "D", stan::model::index_uni(i))) *
              (stan::math::exp((-(E + M) *
                 (stan::model::rvalue(tp, "tp", stan::model::index_uni(t)) -
                 tacc))) -
              stan::math::exp(
                (-stan::model::rvalue(kem, "kem", stan::model::index_uni(i))
                * (stan::model::rvalue(tp, "tp", stan::model::index_uni(t)) -
                tacc))))))), "assigning variable Cmetpred",
              stan::model::index_uni(t), stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 74;
      if (stan::math::logical_eq(n_out, 2)) {
        current_statement__ = 72;
        for (int t = 1; t <= lentp; ++t) {
          current_statement__ = 70;
          stan::model::assign(CGpred,
            (((stan::model::rvalue(G0, "G0", stan::model::index_uni(1)) -
            stan::model::rvalue(gmax, "gmax", stan::model::index_uni(1))) *
            stan::math::exp(
              (-stan::model::rvalue(ke, "ke", stan::model::index_uni(2)) *
              stan::model::rvalue(tp, "tp", stan::model::index_uni(t))))) +
            stan::model::rvalue(gmax, "gmax", stan::model::index_uni(1))),
            "assigning variable CGpred", stan::model::index_uni(t),
            stan::model::index_uni(2));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "ku", ku, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "ke", ke, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "km", km, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "kem", kem, 0);
      if (emit_transformed_parameters__) {
        out__.write(ku);
        out__.write(ke);
        out__.write(km);
        out__.write(kem);
        out__.write(U);
        out__.write(M);
        out__.write(E);
        out__.write(R);
        out__.write(D);
        out__.write(CGpred);
        out__.write(Cmetpred);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<std::vector<double>> CGobs_out =
        std::vector<std::vector<double>>(lentp,
          std::vector<double>(n_out,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> Cmet_out =
        std::vector<std::vector<double>>(lentp,
          std::vector<double>(n_met,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> Cexp_interpol =
        std::vector<std::vector<double>>(len_vt,
          std::vector<double>(n_exp,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 80;
      for (int t = 1; t <= lentp; ++t) {
        current_statement__ = 75;
        stan::model::assign(CGobs_out,
          stan::math::normal_rng(
            stan::model::rvalue(CGpred, "CGpred", stan::model::index_uni(t),
              stan::model::index_uni(1)),
            stan::model::rvalue(sigmaCGpred, "sigmaCGpred",
              stan::model::index_uni(1)), base_rng__),
          "assigning variable CGobs_out", stan::model::index_uni(t),
          stan::model::index_uni(1));
        current_statement__ = 78;
        for (int i = 1; i <= n_met; ++i) {
          current_statement__ = 76;
          stan::model::assign(Cmet_out,
            stan::math::normal_rng(
              stan::model::rvalue(Cmetpred, "Cmetpred",
                stan::model::index_uni(t), stan::model::index_uni(i)),
              stan::model::rvalue(sigmaCmetpred, "sigmaCmetpred",
                stan::model::index_uni(i)), base_rng__),
            "assigning variable Cmet_out", stan::model::index_uni(t),
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 85;
      if (stan::math::logical_eq(n_out, 2)) {
        current_statement__ = 83;
        for (int t = 1; t <= lentp; ++t) {
          current_statement__ = 81;
          stan::model::assign(CGobs_out,
            stan::math::normal_rng(
              stan::model::rvalue(CGpred, "CGpred",
                stan::model::index_uni(t), stan::model::index_uni(2)),
              stan::model::rvalue(sigmaCGpred, "sigmaCGpred",
                stan::model::index_uni(2)), base_rng__),
            "assigning variable CGobs_out", stan::model::index_uni(t),
            stan::model::index_uni(2));
        }
      }
      current_statement__ = 90;
      for (int i = 1; i <= n_exp; ++i) {
        current_statement__ = 88;
        for (int t = 1; t <= len_vt; ++t) {
          current_statement__ = 86;
          stan::model::assign(Cexp_interpol,
            interpolate(
              stan::model::rvalue(vt, "vt", stan::model::index_uni(t)), tp,
              stan::model::rvalue(Cexp, "Cexp",
                stan::model::index_min_max(1, lentp),
                stan::model::index_uni(i)), pstream__),
            "assigning variable Cexp_interpol", stan::model::index_uni(t),
            stan::model::index_uni(i));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          out__.write(CGobs_out[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          out__.write(Cmet_out[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= len_vt; ++sym2__) {
          out__.write(Cexp_interpol[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> log10ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_exp, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(log10ku,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_exp),
        "assigning variable log10ku");
      out__.write(log10ku);
      Eigen::Matrix<local_scalar_t__,-1,1> log10ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_out, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(log10ke,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_out),
        "assigning variable log10ke");
      out__.write(log10ke);
      Eigen::Matrix<local_scalar_t__,-1,1> log10km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(log10km,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_met),
        "assigning variable log10km");
      out__.write(log10km);
      Eigen::Matrix<local_scalar_t__,-1,1> log10kem =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(log10kem,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_met),
        "assigning variable log10kem");
      out__.write(log10kem);
      std::vector<local_scalar_t__> sigmaCGpred =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(sigmaCGpred,
        in__.read<std::vector<local_scalar_t__>>(n_out),
        "assigning variable sigmaCGpred");
      out__.write_free_lb(0, sigmaCGpred);
      Eigen::Matrix<local_scalar_t__,-1,1> sigmaCmetpred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(sigmaCmetpred,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_met),
        "assigning variable sigmaCmetpred");
      out__.write_free_lb(0, sigmaCmetpred);
      std::vector<local_scalar_t__> gmax =
        std::vector<local_scalar_t__>(gmax_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(gmax,
        in__.read<std::vector<local_scalar_t__>>(gmax_1dim__),
        "assigning variable gmax");
      out__.write_free_lb(0, gmax);
      std::vector<local_scalar_t__> G0 =
        std::vector<local_scalar_t__>(G0_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(G0,
        in__.read<std::vector<local_scalar_t__>>(G0_1dim__),
        "assigning variable G0");
      out__.write_free_lb(0, G0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "log10ku",
        "double", std::vector<size_t>{static_cast<size_t>(n_exp)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "log10ke",
        "double", std::vector<size_t>{static_cast<size_t>(n_out)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "log10km",
        "double", std::vector<size_t>{static_cast<size_t>(n_met)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "log10kem",
        "double", std::vector<size_t>{static_cast<size_t>(n_met)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "sigmaCGpred",
        "double", std::vector<size_t>{static_cast<size_t>(n_out)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sigmaCmetpred",
        "double", std::vector<size_t>{static_cast<size_t>(n_met)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "gmax", "double",
        std::vector<size_t>{static_cast<size_t>(gmax_1dim__)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "G0", "double",
        std::vector<size_t>{static_cast<size_t>(G0_1dim__)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> log10ku =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_exp, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log10ku_flat__;
        current_statement__ = 1;
        log10ku_flat__ = context__.vals_r("log10ku");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(log10ku, log10ku_flat__[(pos__ - 1)],
            "assigning variable log10ku", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log10ku);
      Eigen::Matrix<local_scalar_t__,-1,1> log10ke =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_out, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log10ke_flat__;
        current_statement__ = 2;
        log10ke_flat__ = context__.vals_r("log10ke");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(log10ke, log10ke_flat__[(pos__ - 1)],
            "assigning variable log10ke", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log10ke);
      Eigen::Matrix<local_scalar_t__,-1,1> log10km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log10km_flat__;
        current_statement__ = 3;
        log10km_flat__ = context__.vals_r("log10km");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(log10km, log10km_flat__[(pos__ - 1)],
            "assigning variable log10km", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log10km);
      Eigen::Matrix<local_scalar_t__,-1,1> log10kem =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log10kem_flat__;
        current_statement__ = 4;
        log10kem_flat__ = context__.vals_r("log10kem");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(log10kem, log10kem_flat__[(pos__ - 1)],
            "assigning variable log10kem", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log10kem);
      std::vector<local_scalar_t__> sigmaCGpred =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 5;
      sigmaCGpred = context__.vals_r("sigmaCGpred");
      out__.write_free_lb(0, sigmaCGpred);
      Eigen::Matrix<local_scalar_t__,-1,1> sigmaCmetpred =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_met, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigmaCmetpred_flat__;
        current_statement__ = 6;
        sigmaCmetpred_flat__ = context__.vals_r("sigmaCmetpred");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(sigmaCmetpred, sigmaCmetpred_flat__[(pos__ -
            1)], "assigning variable sigmaCmetpred",
            stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigmaCmetpred);
      std::vector<local_scalar_t__> gmax =
        std::vector<local_scalar_t__>(gmax_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      gmax = context__.vals_r("gmax");
      out__.write_free_lb(0, gmax);
      std::vector<local_scalar_t__> G0 =
        std::vector<local_scalar_t__>(G0_1dim__, DUMMY_VAR__);
      current_statement__ = 8;
      G0 = context__.vals_r("G0");
      out__.write_free_lb(0, G0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"log10ku", "log10ke", "log10km",
                "log10kem", "sigmaCGpred", "sigmaCmetpred", "gmax", "G0"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"ku", "ke", "km", "kem", "U", "M", "E", "R", "D", "CGpred",
             "Cmetpred"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"CGobs_out", "Cmet_out", "Cexp_interpol"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_exp)},
                std::vector<size_t>{static_cast<size_t>(n_out)},
                std::vector<size_t>{static_cast<size_t>(n_met)},
                std::vector<size_t>{static_cast<size_t>(n_met)},
                std::vector<size_t>{static_cast<size_t>(n_out)},
                std::vector<size_t>{static_cast<size_t>(n_met)},
                std::vector<size_t>{static_cast<size_t>(gmax_1dim__)},
                std::vector<size_t>{static_cast<size_t>(G0_1dim__)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_exp)},
             std::vector<size_t>{static_cast<size_t>(n_out)},
             std::vector<size_t>{static_cast<size_t>(n_met)},
             std::vector<size_t>{static_cast<size_t>(n_met)},
             std::vector<size_t>{static_cast<size_t>(lentp)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(lentp)},
             std::vector<size_t>{static_cast<size_t>(n_met)},
             std::vector<size_t>{static_cast<size_t>(lentp),
               static_cast<size_t>(n_out)},
             std::vector<size_t>{static_cast<size_t>(lentp),
               static_cast<size_t>(n_met)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(lentp),
               static_cast<size_t>(n_out)},
             std::vector<size_t>{static_cast<size_t>(lentp),
               static_cast<size_t>(n_met)},
             std::vector<size_t>{static_cast<size_t>(len_vt),
               static_cast<size_t>(n_exp)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ku" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ke" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10km" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10kem" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmaCGpred" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmaCmetpred" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gmax_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gmax" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "G0" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ku" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        param_names__.emplace_back(std::string() + "ke" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "km" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "kem" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lentp; ++sym1__) {
        param_names__.emplace_back(std::string() + "U" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "M");
      param_names__.emplace_back(std::string() + "E");
      for (int sym1__ = 1; sym1__ <= lentp; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "D" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "CGpred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cmetpred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "CGobs_out" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cmet_out" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= len_vt; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cexp_interpol" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ku" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10ke" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10km" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "log10kem" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmaCGpred" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigmaCmetpred" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= gmax_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "gmax" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= G0_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "G0" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        param_names__.emplace_back(std::string() + "ku" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        param_names__.emplace_back(std::string() + "ke" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "km" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "kem" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= lentp; ++sym1__) {
        param_names__.emplace_back(std::string() + "U" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "M");
      param_names__.emplace_back(std::string() + "E");
      for (int sym1__ = 1; sym1__ <= lentp; ++sym1__) {
        param_names__.emplace_back(std::string() + "R" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        param_names__.emplace_back(std::string() + "D" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "CGpred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cmetpred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "CGobs_out" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_met; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lentp; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cmet_out" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_exp; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= len_vt; ++sym2__) {
          param_names__.emplace_back(std::string() + "Cexp_interpol" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"log10ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_exp) + "},\"block\":\"parameters\"},{\"name\":\"log10ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_out) + "},\"block\":\"parameters\"},{\"name\":\"log10km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"log10kem\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"sigmaCGpred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigmaCmetpred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"gmax\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gmax_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"G0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G0_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_exp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kem\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lentp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"M\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lentp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"CGpred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Cmetpred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"CGobs_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lentp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"Cmet_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lentp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_met) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"Cexp_interpol\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(len_vt) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_exp) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"log10ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_exp) + "},\"block\":\"parameters\"},{\"name\":\"log10ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_out) + "},\"block\":\"parameters\"},{\"name\":\"log10km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"log10kem\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"sigmaCGpred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigmaCmetpred\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"parameters\"},{\"name\":\"gmax\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gmax_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"G0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(G0_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ku\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_exp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ke\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kem\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"U\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lentp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"M\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"E\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"R\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(lentp) + "},\"block\":\"transformed_parameters\"},{\"name\":\"D\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"CGpred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_out) + "},\"block\":\"transformed_parameters\"},{\"name\":\"Cmetpred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lentp) + ",\"cols\":" + std::to_string(n_met) + "},\"block\":\"transformed_parameters\"},{\"name\":\"CGobs_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lentp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"Cmet_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lentp) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_met) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"Cexp_interpol\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(len_vt) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_exp) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n_exp + n_out) + n_met) + n_met) +
      n_out) + n_met) + gmax_1dim__) + G0_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((n_exp + n_out) + n_met) + n_met) + lentp) + 1) + 1) + lentp)
      + n_met) + (lentp * n_out)) + (lentp * n_met)));
    const size_t num_gen_quantities = emit_generated_quantities * ((((lentp *
      n_out) + (lentp * n_met)) + (len_vt * n_exp)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n_exp + n_out) + n_met) + n_met) +
      n_out) + n_met) + gmax_1dim__) + G0_1dim__);
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((n_exp + n_out) + n_met) + n_met) + lentp) + 1) + 1) + lentp)
      + n_met) + (lentp * n_out)) + (lentp * n_met)));
    const size_t num_gen_quantities = emit_generated_quantities * ((((lentp *
      n_out) + (lentp * n_met)) + (len_vt * n_exp)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_TK_namespace::model_TK;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_TK_namespace::profiles__;
}
#endif
#endif
